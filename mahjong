#!/usr/bin/wish
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2016 by Roger E Critchlow Jr, Cambridge, MA, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

#
# This is a reimplementation of gnome-mahjongg, my preferred time wasting
# solitaire on linux.  For many years I have been annoyed by aspects of
# gnome-mahjongg, but each attempt to deal with the code have been repelled
# by the density of the frameworks used to write the program.  I literally
# could not find the program in its source code, because most of the source
# code is somewhere else in a software framework.  So, I have rewritten 
# the program using Tcl, Tk, and Snit so that all of the source code will
# be apparent to anyone wishing to modify the program.
#
# I will provide only the barest introduction to Tcl, Tk, and Snit because
# you will need other resources if you really want to understand.  Start
# with the online manuals at https://www.tcl.tk/man/ and liberally apply
# google to your problems
#
# Tcl writes function calls in the form
#	func arg arg2
# the result of a function call is captured by square brackets 
#	[func arg arg2]
# variable references are written as
#	$variable
# variable assignment is performed by the set command
#	set variable {1 2 3}
# double quoted text is scanned for command and variable substitution
#	"substitutes $variable and [func arg arg2] in line"
# but curly brace quoted text
#	{does not evaluate $variable or [func arg arg2]}
# Memorizing https://www.tcl.tk/man/tcl8.6/TclCmd/Tcl.htm is a good plan.
#
# Tk uses Tcl to implement graphical user interfaces.  Originally a client 
# of the X11 windowing system on Unix, Tk now happily runs as a native client
# almost everywhere.  Tk user interface widgets are instances given names
#	canvas .name
# the instance name can then be used to set and retrieve configuratio options
#	.name configure -background blue
#	.name cget -background
# or to run methods
#	.name create image
# The manual pages for Tk and the widget-demo.tcl example script will give you
# an overview of the widgets implemented by Tk.  But Mahjong doesn't use much 
# of all that because it is entirely implemented in one Tk canvas widget.
#
# Snit uses Tcl to implement a Tk style object system.  Snit is distributed as
# part of Tcllib, a library implemented entirely in Tcl without use of extensions
# written in C or other high level languages.
#
package require Tcl
package require Tk
package require snit

set ::usetkpath 0
if {$::usetkpath} {
    package require tkpath
}

snit::type mahjong::prefs {
    option -file prefs.tcl
    option -directory -default {} -readonly true
    constructor {args} {
	$self configure {*}$args
    }
    method resolve {file} {
	if {[file isdir [file join ~ .config]]} {
	    set options(-directory) [file join ~ .config mahjong]
	} elseif {[file isdir [file join ~ Library Preferences]]} {
	    set options(-directory) [file join ~ Library Preferences mahjong]
	} elseif {[file isdir [file join ~ {Applications Data}]]} {
	    set options(-directory) [file join ~ {Applications Data} mahjong]
	} else {
	    error "unable to find a preferences directory"
	}
	if { ! [file isdir $options(-directory)]} {
	    file mkdir $options(-directory)
	}
	return [file join $options(-directory) $file]
    }
    method save-prefs {array} {
	if {[catch {
	    set fp [open [$self resolve prefs.tcl] w]
	    puts $fp "array set prefs {"
	    foreach {name value} $array {
		puts $fp [list $name $value]
	    }
	    puts $fp "}"
	    close $fp
	} error]} {
	    puts "save-prefs: $error\n$::errorInfo"
	}
    }
    method load-prefs {} {
	if {[catch {
	    set fp [open [$self resolve prefs.tcl] r]
	    set data [read $fp]
	    close $fp
	    if {[string first {array set prefs} $data] != 0} {
		error "malformed prefs.tcl"
	    }
	    eval $data
	} error]} {
	    # puts "error in load-prefs: $error\n$::errorInfo"
	    return {}
	}
	return [array get prefs]
    }
    method save-scores {list} {
	if {[catch {
	    set fp [open [$self resolve scores.tcl] w] 
	    puts $fp [join $list \n]
	    close $fp
	} error]} {
	}
    }
    method load-scores {} {
	if {[catch {
	    set fp [open [$self resolve scores.tcl] r] 
	    set list [split [string trim [read $fp]] \n]
	    close $fp
	    return $list
	} error]} {
	    return {}
	}
    }
}

snit::type mahjong::layout {
    option -verbose -default 1
    option -map -default {} -configuremethod Configure
    option -layout -readonly true
    option -slots -readonly true
    option -layers -readonly true
    option -rows -readonly true
    option -blocks -readonly true

    constructor {args} {
	if {$options(-verbose) > 5} { puts "$self configure $args" }
	$self configure {*}$args
    }

    # create the layout from a map
    method {Configure -map} {val} {
	if {$options(-verbose) > 5} { puts "$self configure -map $val" }
	set options(-map) $val
	set options(-layout) [dict create]
	set options(-slots) {}
	foreach layer $options(-map) {
	    $self expand-layout $layer
	}
	foreach slot $options(-slots) {
	    $self compute-x-adjacent $slot
	    $self compute-z-shadow $slot
	    #$self compute-left-and-right-rows $slot
	}
	foreach slot $options(-slots) {
	    $self compute-x-closure $slot
	    $self compute-row-closure $slot
	}

    }

    # maintaining slots in the layout
    # the options(-layout) dictionary maps xyz slots to properties
    method set {xyz tag val} { dict set options(-layout) $xyz $tag $val }
    method get {xyz tag} { return [dict get $options(-layout) $xyz $tag] }
    method exists {xyz tag} { return [dict exists $options(-layout) $xyz $tag] }
    method lappend {xyz tag args} { dict with options(-layout) $xyz { lappend $tag {*}$args } }

    # maintaining the primary slot in the layout
    # this is the only one that changes after the layout is setup
    method set-slot {slot val} { $self set $slot slot $val }
    method get-slot {slot} { return [$self get $slot slot] }
    method exists-slot {slot} { return [$self exists $slot slot] }
    method set-empty {slot} { $self set-slot $slot {} }
    method is-empty {slot} { return [expr {[$self get-slot $slot] eq {}}] }
    method is-filled {slot} { return [expr {[$self get-slot $slot] ne {}}]}
    method is-endcap {xyz} { return [$self get $xyz endcap] }
    method is-naked-endcap {xyz} { return [$self get $xyz naked-endcap] }

    proc slot-x {slot} { return [lindex $slot 0] }
    proc slot-y {slot} { return [lindex $slot 1] }
    proc slot-z {slot} { return [lindex $slot 2] }

    # get all of the slots in render order
    # ie, those which are obscured are drawn before those which obscure
    method get-slots {} { return $options(-slots) }
    # find the slots in a z layer in render order
    method layer-slots {z} { return [lmap slot [$self get-slots] {expr {($z == [slot-z $slot]) ? $slot : [continue]}}] }

    # expand the layout map description
    method expand-layout {layout {z 0}} {
	if {$options(-verbose) > 5} { puts "$self expand-layout $layout" }
	set tag [lindex $layout 0]
	array set l [lrange $layout 1 end]
	if {[info exists l(z)]} { set z $l(z) }
	switch $tag {
	    layer {
		foreach p $l(parts) { $self expand-layout $p $z }
	    }
	    tile {
		set row [list [$self add-tile $l(x) $l(y) $z]]
		$self add-row $row
		$self add-block $row
	    }
	    row {
		set row {}
		for {set x $l(right)} {$x >= $l(left)} {set x [expr {$x-1}]} {
		    lappend row [$self add-tile $x $l(y) $z]
		}
		$self add-row $row
		$self add-block $row
	    }
	    block {
		set block {}
		for {set y $l(top)} {$y <= $l(bottom)} {set y [expr {$y+1}]} {
		    set row {}
		    for {set x $l(right)} {$x >= $l(left)} {set x [expr {$x-1}]} {
			lappend row [$self add-tile $x $y $z]
		    }
		    $self add-row $row
		    lappend block {*}$row
		}
		$self add-block $block
	    }
	    default { error "what is $layout doing in the map?" }
	}
    }

    # add the list of slots in a row
    method add-row {row} { foreach slot $row { $self set $slot row $row } }
    # add the list of slots in a block
    method add-block {block} { foreach slot $block { $self set $slot block $block } }
    # mark two cells as x-adjacents, should be x-adjacent, need x-left-adjacent and x-right-adjacent, too
    method add-x-adjacent {xyz xnynzn} { $self add-symmetric x-adjacent $xyz $xnynzn }
    # record a symmetric relation
    method add-symmetric {relation slot1 slot2} {
	# puts "$self add-symmetric $relation {$slot1} {$slot2}a"
	if {[lsearch [$self get $slot1 $relation] $slot2] < 0} {
	    $self lappend $slot1 $relation $slot2
	}
	if {[lsearch [$self get $slot2 $relation] $slot1] < 0} {
	    $self lappend $slot2 $relation $slot1
	}
	# puts "$relation {$slot1} is [$self get $slot1 $relation]"
	# puts "$relation {$slot2} is [$self get $slot2 $relation]"
    }
    # an antisymmetric relation
    method add-left-adjacent {slot1 slot2} {
	if {$slot2 ni [$self get $slot1 left-adjacent]} { $self lappend $slot1 left-adjacent $slot2 }
	if {$slot1 ni [$self get $slot2 right-adjacent]} { $self lappend $slot2 right-adjacent $slot1 }
    }
    method add-right-adjacent {slot1 slot2} { $self add-left-adjacent $slot2 $slot1 }
	
    # add a new tile to the layout
    method add-tile {x y z} {
	# canonicalize the coordinates
	# trouble with x, y in double vs integer as dictionary keys
	set x [expr {double($x)}]
	set y [expr {double($y)}]
	set z [expr {int($z)}]
	if {$options(-verbose) > 5} { puts "add-tile $x $y $z" }
	set xyz [list $x $y $z]
	# initialize slot
	$self set-slot $xyz {}
	foreach {tag val} {
	    x-adjacent {}
	    x-closure {}
	    left-adjacent {}
	    right-adjacent {}
	    z-shadow {}
	    endcap 0
	    naked-endcap 0
	    triple-point 0
	} {
	    $self set $xyz $tag $val
	}
	lappend options(-slots) $xyz
	return $xyz
    }

    # compute the x-adjacent set of the tile
    method compute-x-adjacent {xyz} {
	foreach {x y z} $xyz break
	foreach dx {-1 1} {
	    set xn [expr {$x+$dx}]
	    foreach dy {-0.5 0 0.5} {
		set yn [expr {$y+$dy}]
		if { ! [$self exists-slot [list $xn $yn $z]]} continue
		set xnynzn [list $xn $yn $z]
		$self add-x-adjacent $xyz $xnynzn
		if {$xn-$x < 0} {
		    $self add-left-adjacent $xyz $xnynzn
		} else {
		    $self add-right-adjacent $xyz $xnynzn
		}
	    }
	}
	if {[llength [$self left-adjacent $xyz]] == 0 || 
	    [llength [$self right-adjacent $xyz]] == 0} {
	    $self set $xyz endcap 1
	    if { ! [$self is-covered-in-z $xyz]} {
		$self set $xyz naked-endcap 1
	    }
	}
	if {[llength [$self left-adjacent $xyz]] == 2} {
	    # make an llr triple point
	    set llr [list {*}[$self left-adjacent $xyz] $xyz]
	    foreach slot $llr t {l1 l2 r} {
		$self set $xyz triple-point 1
		$self set $xyz triple-point-llr [list $t {*}$llr]
	    }
	}
	if {[llength [$self right-adjacent $xyz]] == 2} {
	    # make an lrr triple point
	    set lrr [list $xyz {*}[$self right-adjacent $xyz]]
	    foreach slot $lrr t {l r1 r2} {
		$self set $xyz triple-point 1
		$self set $xyz triple-point-lrr [list $t {*}$lrr]
	    }
	}
    }
    method is-triple-point {xyz} { return [$self get $xyz triple-point] }
    method triple-point-eval {xyz} {
	if {[$self exists $xyz triple-point-llr]} {
	    foreach {t l1 l2 r} [$self get $xyz triple-point-llr] break
	    set cl1 [$self all-empty [$self left-closure $l1]]
	    set cl2 [$self all-empty [$self left-closure $l2]]
	    set cr [$self all-empty [$self right-closure $r]]
	    if {$cr} {
		if {$cl1 && [$self is-filled $l2]} {
		    return [expr {$t in {l1 r}}]
		} elseif {[$self is-filled $l1] && $cl2} {
		    return [expr {$t in {l2 r}}]
		}
	    }
	}
	if {[$self exists $xyz triple-point-lrr]} {
	    foreach {t l r1 r2} [$self get $xyz triple-point-lrr] break
	    set cl [$self all-empty [$self left-closure $l]]
	    set cr1 [$self all-empty [$self right-closure $r1]]
	    set cr2 [$self all-empty [$self right-closure $r2]]
	    if {$cl} {
		if {$cr1 && [$self is-filled $r2]} {
		    return [expr {$t in {l r1}}]
		} elseif {[$self is-filled $r1] && $cr2} {
		    return [expr {$t in {l r2}}]
		}
	    }
	}
	return 0
    }
    # find the z-shadow cast by this tile on the next layer
    method compute-z-shadow {xyz} {
	foreach {x y z} $xyz break
	set shadow {}
	if {$z > 0} {
	    set x0 [expr {$x-0.5}]
	    set x1 [expr {$x+0.5}]
	    set y0 [expr {$y-0.5}]
	    set y1 [expr {$y+0.5}]
	    foreach slot [$self layer-slots [expr {$z-1}]] {
		foreach {nx ny nz} $slot break
		if {(min($x1,$nx+0.5)-max($x0,$nx-0.5)) > 0 
		    && (min($y1,$ny+0.5)-max($y0,$ny-0.5)) > 0} {
		    lappend shadow $slot
		}
	    }
	}
	$self set $xyz z-shadow $shadow
    }
    method compute-x-closure {xyz} {
	$self set $xyz x-closure [$self compute-relation-closure $xyz x-adjacent]
    }
    method compute-relation-closure {xyz relation} {
	array set closure {}
	set level 1
	set closure($xyz) $level
	set found 1
	while {$found} {
	    set found 0
	    incr level
	    foreach slot [array names closure] {
		if {$closure($slot) != $level-1} continue
		foreach s [$self $relation $slot] {
		    if { ! [info exists closure($s)]} {
			incr found
			set closure($s) $level
		    }
		}
	    }
	}
	# unset closure($xyz)
	return [lsort -real -index 0 [array names closure]]
    }
    # compute the row closure of a slot
    method compute-row-closure {xyz} {
	set rclosure {}
	lappend rowclosure $xyz
	foreach lr {left right} {
	    set closure {}
	    for {set new [$self $lr-adjacent $xyz]} {[llength $new] > 0} {set new $nnew} {
		set nnew {}
		foreach slot $new {
		    if {[lsearch $closure $slot] < 0} {
			lappend closure $slot
			lappend nnew {*}[$self $lr-adjacent $slot]
		    }
		}
	    }
	    lappend rowclosure {*}$closure
	}
	$self set $xyz row-closure [lsort -real -index 0 [lsort -real -index 1 $rowclosure]]
	$self set $xyz left-closure [lmap s [$self row-closure $xyz] {expr {[lindex $s 0] <= [lindex $xyz 0] ? $s : [continue]}}]
	$self set $xyz right-closure [lmap s [$self row-closure $xyz] {expr {[lindex $s 0] >= [lindex $xyz 0] ? $s : [continue]}}]
    }

    # return the z-shadow of a slot
    method z-shadow {xyz} { return [$self get $xyz z-shadow] }
    # return the x-adjacent of a slot
    method x-adjacent {xyz} { return [$self get $xyz x-adjacent] }
    # return the x-adjacent closure of a slot
    method x-closure {xyz} { return [$self get $xyz x-closure] }
    # return the left x-adjacent
    method left-adjacent {xyz} { return [$self get $xyz left-adjacent] }
    # return the right x-adjacent
    method right-adjacent {xyz} { return [$self get $xyz right-adjacent] }
    # return the block of the slot
    method block {xyz} { return [$self get $xyz block] }
    # return the row of a slot
    method row {xyz} { return [$self get $xyz row] }
    # return the row closure of a slot
    method row-closure {xyz} { return [$self get $xyz row-closure] }
    method left-closure {xyz} { return [$self get $xyz left-closure] }
    method right-closure {xyz} { return [$self get $xyz right-closure] }
    # number of empty slots, all filled, or all empty
    method number-empty {slots} { return [tcl::mathop::+ {*}[lmap s $slots {$self is-empty $s}]] }
    method all-filled {slots} {	return [expr {[$self number-empty $slots] == 0}] }
    method all-empty {slots} { return [expr  {[$self number-empty $slots] == [llength $slots]}] }
    method any-filled {slots} { return [expr {[$self number-empty $slots] < [llength $slots]}] }
    # well known slot sets all filled or all empty
    method any-filled-x-adjacent {xyz} { return [$self any-filled [$self x-adjacent $xyz]] } 
    method all-filled-left-adjacent {xyz} { return [$self all-filled [$self left-adjacent $xyz]] }
    method all-filled-right-adjacent {xyz}  { return [$self all-filled [$self right-adjacent $xyz]] }
    method all-empty-left-adjacent {xyz} { return [$self all-empty [$self left-adjacent $xyz]] }
    method all-empty-right-adjacent {xyz}  { return [$self all-empty [$self right-adjacent $xyz]] }
    # can a slot be played
    method can-play {slot} {
	# cannot play an empty slot
	if {[$self is-empty $slot]} { return 0 }
	# cannot play if covered in z
	if {[$self is-covered-in-z $slot]} { return 0 }
	# cannot play if covered in x
	if {[$self is-covered-in-x $slot]} { return 0 }
	return 1
    }
    method is-covered-in-z {slot} {
	foreach s [$self layer-slots [expr {[slot-z $slot]+1}]] {
	    if {[$self is-filled $s] && $slot in [$self z-shadow $s]} {
		return 1
	    }
	}
	return 0
    }
    method is-covered-in-x {slot} {
	if {[$self is-endcap $slot]} { return 0 }
	if {[$self all-empty-left-adjacent $slot]} { return 0 }
	if {[$self all-empty-right-adjacent $slot]} { return 0 }
	return 1
    }
    # can a slot be unplayed
    method can-unplay {slot {donotblock {}}} {
	# cannot unplay a filled slot
	if { ! [$self is-empty $slot]} { return 0 }
	# cannot unplay a slot over an empty slot in z
	if {[$self covers-empty-in-z $slot]} { return 0 }
	# cannot unplay a slot over an empty slot in x
	if {[$self covers-empty-in-x $slot]} { return 0 }
	# if donotblock is present, do not play next to or over it
	if {$donotblock ne {}} {
	    # this is the last bug in the game generator, if you
	    # choose the two slots to unplay independently, then
	    # the second can block the first, to be a legal unplay
	    # you have to be able to play the slots in either order
	    if {[$self blocks-in $slot $donotblock]} { return 0 }
	}
	# that was the last bug, but there is another. it is possible to
	# unplay legal moves to a deadlock. so I need to look ahead to
	# choose the best unplayable, or somehow finesse the problem
	return 1;
    }
    #
    method covers-empty-in-z {slot} {
	return [tcl::mathop::+ {*}[lmap s [$self z-shadow $slot] {$self is-empty $s}]]
    }
    #
    method covers-empty-in-x {slot} {
	# Each x-adjacent-closure shall start in one compartment
	# there are ways that multiple seeds could start in 
	# different rows in the compartment and grow together
	# but the growth cannot cross a boundary between different 
	# numbers of rows except when the crossing into row(s) is(are)
	# completely covered by the crossing out of row(s)
	set x [$self x-closure $slot]
	set n [llength $x]
	set ne [tcl::mathop::+ {*}[lmap s $x {$self is-empty $s}]]
	# entirely empty, any slot will do
	if {$ne == $n} { return 0 }
	# one slot left, it will do
	if {$ne == 1} { return 0 }
	# if it is an endcap slot
	if {[$self is-endcap $slot]} {
	    # all neighbors filled, it will do else wait until they're filled
	    if {[$self all-filled [$self x-adjacent $slot]]} { return 0 } else { return 1 }
	}
	# this block is empty, but the closure is not empty
	if {[$self all-empty [$self block $slot]]} {
	    # if all our neighbors to one side are filled, then okay, else not
	    if {[$self all-filled-left-adjacent $slot] || [$self all-filled-right-adjacent $slot]} {
		return 0 } else { return 1 }
	}
	# this block is not empty
	# this row, and its extensions into adjoining blocks are all empty
	# this is the key, isn't it?
	if {[$self all-empty [$self row-closure $slot]]} {
	    # if we are in a block that contains filled slots
	    # but a row that is empty, then any slot in the row
	    # is acceptable, but only if the rows connected to this
	    # row in the closure are empty, too.
	    return 0
	} else {
	    # if we are in a row closure that contains filled slots
	    # then if we are adjacent to a filled slot, okay,
	    # else not okay
	    if {[$self all-filled-left-adjacent $slot]} {
		return 0
	    } elseif {[$self all-filled-right-adjacent $slot]} {
		return 0
	    } 
	    # if there is a junction where two slots are x-adjacent to one slot,
	    # and one of the two slots filled,
	    # and the outward row closure empty for the other two slots
	    # then the other two slots may be unplayed onto
	    if {[$self is-triple-point $slot] &&
		[$self triple-point-eval $slot]
	    } {
		return 0
	    }
	    return 1
	}
	error "failed to classify case"
    }
    # does slot $sl1 block in slot $sl2
    method blocks-in {sl1 sl2} {
	# sl1 is on top of sl2 and blocks it in
	if {$sl2 in [$self z-shadow $sl1]} {
	    return 1
	}
	# sl1 is not next to sl2
	if {$sl2 ni [$self x-adjacent $sl1]} {
	    return 0
	}
	# sl2 is free on the other side
	if {[$self is-endcap $sl2]} {
	    return 0
	}
	# sl1 is to the left of sl2
	if {$sl1 in [$self left-adjacent $sl2]} {
	    # and there is nothing to the right
	    return [expr { ! [$self all-empty-right-adjacent $sl2]}]
	}
	# sl1 is to the right of sl2
	# and there is nothing to the left
	return [expr { ! [$self all-empty-left-adjacent $sl2]}]
    }
}

#
# translate a subset of svg into canvas graphics
# make the <defs></defs> in an svg file available
# for rendering as canvas items, and cache the
# translation
#
snit::type mahjong::svg {
    option -file -default {} -readonly true
    option -data -default {} -readonly true
    
    constructor {args} {
	$self configure {*}$args
	if {$options(-data) ne {}} {
	    $self parse $options(-data)
	} elseif {$options(-file) ne {}} {
	    $self parse [read-file $options(-file)]
	} else {
	    error "svg needs -data or -file option specified"
	}
    }

    #
    # read a whole file
    #
    proc read-file {file} {
	set fp [open $file]
	set d [read $fp]
	close $fp
	return $d
    }
    
    #
    # translate an xml format document into a tcl list
    #
    proc xml2list xml {
	regsub -all {>\s*<} [string trim $xml " \n\t<>"] "\} \{" xml
	set xml [string map {> "\} \{#text \{" < "\}\} \{"}  $xml]
	
	set res ""   ;# string to collect the result   
	set stack {} ;# track open tags
	set rest {}
	
	foreach item "{$xml}" {
	    switch -regexp -- $item {
		^# {
		    append res "{[lrange $item 0 end]} " ; #text item
		}
		^/ {
		    regexp {/(.+)} $item -> tagname ;# end tag
		    set expected [lindex $stack end]
		    if {$tagname!=$expected} {error "$item != $expected"}
		    set stack [lrange $stack 0 end-1]
		    append res "\}\} "
		}
		/$ { # singleton - start and end in one <> group
		    regexp {([^ ]+)( (.+))?/$} $item -> tagname - rest
		    set rest [lrange [string map {= " "} $rest] 0 end]
		    append res "{$tagname [list $rest] {}} "
		}
		^!-- { # comment
		}
		default {
		    set tagname [lindex $item 0] ;# start tag
		    set rest [lrange [string map {= " "} $item] 1 end]
		    lappend stack $tagname
		    append res "\{$tagname [list $rest] \{"
		}
	    }
	    if {[llength $rest]%2} {error "att's not paired: $rest"}
	}
	if [llength $stack] {error "unresolved: $stack"}
	string map {"\} \}" "\}\}"} [lindex $res 0]
    }
    
    variable defs -array {}
    variable targets -array {}
    variable defsid {}
    variable immed {}
    
    #
    # translate the svg defining the mahjong tile set
    # into tk::canvas graphics so the tiles can be 
    # generated at appropriate scale for whatever
    # window is used
    #
    ##
    ## interpret transforms
    ##
    # is a 3 element row vector
    proc is-vector {v} {
	return [tcl::mathop::& [expr {[llength $v]==3}] {*}[lmap vi $v {string is double $vi}]]
    }
    # is a 3x3 matrix
    proc is-matrix {m} {
	return [tcl::mathop::& [expr {[llength $m]==3}] {*}[lmap mi $m {is-vector $mi}]]
    }
    # matrix(a b c d e f) as a matrix
    proc abcdef-to-matrix {abcdef} {
	if {[llength $abcdef] != 6} { error "bad abcdef: $abcdef" }
	foreach {a b c d e f} $abcdef break
	return [list [list $a $c $e] [list $b $d $f] {0 0 1}]
    }
    # scale(x y) as a matrix
    proc scale-to-abcdef {x {y {}}} {
	if {$y eq {}} { set y $x }
	return [list $x 0 0 $y 0 0]
    }
    # translate(x y) as a matrix
    proc translate-to-abcdef {x {y 0}} {
	return [list 1 0 0 1 $x $y]
    }
    proc matrix-from-translate {x {y 0}} {
	return [abcdef-to-matrix [translate-to-abcdef $x $y]]
    }
    proc matrix-from-scale {x {y {}}} {
	return [abcdef-to-matrix [scale-to-abcdef $x $y]]
    }
    # vector dot product between vectors written as rows
    proc vector-dot {v1 v2} {
	return [tcl::mathop::+ {*}[lmap x $v1 y $v2 {expr {$x*$y}}]]
    }
    # matrix transpose, only 3x3
    proc matrix-transpose {m} {
	foreach {r1 r2 r3} $m break
	return [lmap x1 $r1 x2 $r2 x3 $r3 {list $x1 $x2 $x3}]
    }
    # matrix times a matrix, each as a column of rows
    proc matrix-mul-matrix {m1 m2} {
	if { ! [is-matrix $m1]} { error "bad matrix: $m1" }
	if { ! [is-matrix $m2]} { error "bad matrix: $m2" }
	return [ lmap m1i $m1 { lmap m2j [matrix-transpose $m2] {vector-dot $m1i $m2j} }]
    }
    # matrix times a column vector written as a row
    proc matrix-mul-vector {m v} {
	return [ lmap mi $m {vector-dot $mi $v} ]
    }
    # matrix as matrix(a b c d e f)
    proc matrix-to-abcdef {matrix} {
	foreach {r1 r2 r3} $matrix break
	foreach {a c e} $r1 break
	foreach {b d f} $r2 break
	foreach {g h i} $r3 break
	if {$g != 0 || $h != 0 || $i != 1} { error "matrix has an unexpected third row {$matrix}" }
	return [list $a $b $c $d $e $f]
    }
    # 
    proc transform-interpret {tag attrs matrix} {
	# matrix(<a> <b> <c> <d> <e> <f>) -> [[a c e] [b d f] [0 0 1]]
	#	[xp]   [a c e]   [xn]
	#	[yp] = [b d f] * [yn]
	#	[ 1]   [0 0 1]   [ 1]
	# translate(<x> [<y>]) == matrix(1 0 0 1 x y) -> [[1 0 x][0 1 y][0 0 1]]
	#	missing <y> then y == 0
	# scale(<x> [<y>]) == matrix(x 0 0 y 0 0) -> [[x 0 0][0 y 0][0 0 1]]
	#	missing <y> then y == x
	# rotate(<a> [<x> <y>]) matrix(cos(a) sin(a) -sin(a) cos(a) 0 0)
	# skewX(<a>) matrix(1 0 tan(a) 1 0 0)
	# skewY(<a>) matrix(1 tan(a) 0 1 0 0)
	#
	# transform1 transform2 are combined by matrix-mul-matrix $transform1 $transform2 
	# the current transformation matrix is the combination of all transforms defined 
	# and it transforms coordinates in the current user coordinate frame into coordinates
	# in the view port coordinate frame.
	#
	array set a $attrs
	if {[info exists a(transform)]} {
	    set tfm $a(transform)
	    set tfm [string map {{,} { }} $tfm]
	    set tfm [regsub -all {  +} $tfm { }]
	    set tfm [string trim $tfm]
	    while {$tfm ne {}} {
		if {[regexp {([a-zA-Z]+)\(([-0-9. ]+)\)(.*)$} $tfm all op args rest]} {
		    set n [llength $args]
		    switch $op {
			matrix {
			    if {$n != 6} {
				error "bad matrix $tfm"
			    }
			    set matrix2 [abcdef-to-matrix $args]
			    set nmatrix [matrix-mul-matrix $matrix $matrix2]
			    #puts "$matrix * matrix($args) -> $nmatrix"
			    set matrix $nmatrix
			}
			translate {
			    if {$n != 1 && $n != 2} {
				error "bad translate $tfm"
			    }
			    set matrix2 [abcdef-to-matrix [translate-to-abcdef {*}$args]]
			    set nmatrix [matrix-mul-matrix $matrix $matrix2]
			    #puts "$matrix * translate($args) -> $nmatrix"
			    set matrix $nmatrix
			}
			scale {
			    if {$n != 1 && $n != 2} {
				error "bad scale $tfm"
			    }
			    set matrix2 [abcdef-to-matrix [scale-to-abcdef {*}$args]]
			    set nmatrix [matrix-mul-matrix $matrix $matrix2]
			    #puts "$matrix * scale($args) -> $nmatrix"
			    set matrix $nmatrix
			}
			rotate {
			    if {$n < 1 || $n > 3} {
				error "bad rotate $tfm"
			    }
			    set nmatrix [matrix-mul-matrix $matrix [rotate-to-matrix {*}$args]]
			    puts "$matrix * rotate($args) -> $nmatrix"
			    set matrix $nmatrix
			}
			skewX {
			    if {$n != 1} {
				error "bad skewX $tfm"
			    }
			    set nmatrix [matrix-mul-matrix $matrix [skewX-to-matrix {*}$args]]
			    puts "$matrix * skewX($args) -> $nmatrix"
			    set matrix $nmatrix
			}
			skewY {
			    if {$n != 1} {
				error "bad skewY $tfm"
			    }
			    set nmatrix [matrix-mul-matrix $matrix [skewY-to-matrix {*}$args]]
			    puts "$matrix * skewY($args) -> $nmatrix"
			    set matrix $nmatrix
			}
			default {
			    error "unimplemented transform: $tfm"
			}
		    }
		    set tfm [string trim $rest]
		}
	    }
	}
	return $matrix
    }
    #
    # path d
    # lower case relative, upper case absolute
    # m or M = move
    # l or L = line
    # h or H = horizontal line
    # v or V = vertical line
    # c or C = cubic bezier 
    # s or S = short cubic bezier
    # q or Q = quartic bezier 
    # t or T = short quartic bezier
    # z or Z = terminate path
    # a or A = elliptical arc
    # numbers with optional spaces and commas
    #
    
    #
    # this just parses all those wierdly concatenated operands into clean lists
    # the additional interpretations available are:
    #  1) rewrite h dx1 dx2 ... to l dx1 0 dx2 0 ...
    #  2) rewrite v dy1 dy2 ... to l 0 dy1 0 dy2 ...
    #  3) rewrite s dcx dcy dx dy ... into c ... by inserting the mirrored control point
    #	(there are relatively few s operations in the tiles)
    #  4) rewrite l concatenated to c by replicating the knot point as control point
    #  5) rewrite m c* z as a smoothed canvas polygon
    #  6) rewrite m c* (anything but z) as a smoothed canvas line
    #	(there are very few of these in the tiles)
    #
    proc path-parse {d} {
	set n [string length $d]
	set cmds {}
	set op {}
	set num {}
	set nums {}
	for {set i 0} {$i < $n} {incr i} {
	    set c [string index $d $i]
	    if {$c in {h H v V l L m M z Z c C q Q s S t T}} {
		if {$num ne {}} { lappend nums $num; set num {} }
		if {$op ne {}} { lappend cmds [list $op {*}$nums]; set nums {} }
		set op $c; set num {}; set nums {}
	    } elseif {$c eq {-}} { # negative sign, only as first character
		if {$num ne {}} { lappend nums $num; set num {} }
		append num $c
	    } elseif {$c in {0 1 2 3 4 5 6 7 8 9 .}} { # part of a number
		if { ! [string is double $num$c]} { lappend nums $num; set num {} }
		append num $c
	    } elseif {[string first $c ", \t\n"] >= 0} { # comma or space or newline, separator
		if {$num ne {}} { lappend nums $num }
		set num {}
	    } else {
		error "unexpected character {$c} in path.d"
	    }
	}
	if {$num ne {}} { lappend nums $num; set num {} }
	if {$op ne {}} { lappend cmds [list $op {*}$nums]; set nums {} }
	return $cmds
    }
    proc path-check-operands {cmds} {
	foreach cmd $cmds {
	    set n [llength [lrange $cmd 1 end]]
	    switch [lindex $cmd 0] {
		m - M { set test {$n == 2} }
		h - v -
		H - V { set test {$n > 0} }
		l - L { set test {$n > 1 && ($n % 2) == 0} }
		s - S { set test {$n > 3 && ($n % 4) == 0} }
		c - C { set test {$n > 5 && ($n % 6) == 0} }
		z - Z { set test {$n == 0} }
		default {
		    error "unexpected command: $cmd"
		}
	    }
	    if { ! [expr $test]} {
		error "wrong number of arguments for: $cmd"
	    }
	}
	return $cmds
    }
    proc path-expand {cmds} {
	
	# translate from abbreviated commands to cubic beziers
	set lop {}
	set lxy {}
	set results {}
	foreach cmd $cmds {
	    set op [lindex $cmd 0]
	    set nresult [lrange $cmd 1 end]; # $result
	    while {1} {
		set result $nresult
		set nresult {}
		switch $op {
		    h { 
			foreach dx $result { lappend nresult $dx 0 }
			set op l
			continue
		    }
		    v {
			foreach dy $result { lappend nresult 0 $dy }
			set op l
			continue
		    }
		    l {
			# it seems that if the desired result is that the desired result
			# is a line from the last point of a cubic bezier, then the last
			# point in the bezier needs to be tripled, too, but because it's
			# relative coordinates, that will be 0 0 0 0 0 0.
			if {$lop eq {c}} { lappend nresult 0 0 0 0 0 0 }
			foreach {dx dy} $result { lappend nresult $dx $dy $dx $dy $dx $dy }
			set op c
			continue
		    }
		    s {
			# this is simplified by the change of coordinate frame.
			# ldc2x ldc2y and ldx ldy are specified relative to llx lly
			# so we can mirror ldcx ldcy through ldx ldy by subtraction,
			# oops, so the prior control point to be mirrored might be
			# in the c string immediately preceding this s string.
			if {$lop eq {c}} {
			    foreach {dc2x dc2y dx dy} [lrange $lxy end-3 end] break
			} elseif {$lop eq {m}} {
			    foreach {dc2x dc2y dx dy} [concat $lxy $lxy] break
			} else {
			    error "unexpected predecessor $lop to s in ..."
			}
			set dc1x [expr {$dx-$dc2x}]
			set dc1y [expr {$dy-$dc2y}]
			foreach {dc2x dc2y dx dy} $result {
			    lappend nresult $dc1x $dc1y $dc2x $dc2y $dx $dy
			    # compute next dc1x and dc1y
			    set dc1x [expr {$dx-$dc2x}]
			    set dc1y [expr {$dy-$dc2y}]
			}
			set op c
			continue
		    }
		    z {
			# close path, hmm, so the path ends c1 c2 k, 
			# but the k should be the same as the m that 
			# that started the path?  Looks like it usually
			# is the m that started the path
			# if {$lop eq {c} && $llop eq {m}} {
			#}
			break
		    }
		    m {
			# in a multi part path, this needs to be relative to
			# to the end of the previous path part, but maybe
			# that happens when we translate to coords from deltas.
		    }
		    c {
			break
		    }
		}
		break
	    }
	    if {$lop eq $op} {
		set lxy [list {*}$lxy {*}$result]
		set results [lreplace $results end end [list $lop {*}$lxy]]
	    } else {
		set lop $op
		set lxy $result
		lappend results [list $op {*}$lxy]
	    }
	    
	}
	return $results
    }
    proc path-translate-xy {xname yname cmd m c} {
	upvar $xname x
	upvar $yname y
	switch $cmd {
	    mc - mcz {
		foreach {dx dy} [lrange $m 1 end] break
		set x [expr {$x+$dx}]
		set y [expr {$y+$dy}]
		lappend cmd $x $y
		foreach {dc1x dc1y dc2x dc2y dx dy} [lrange $c 1 end] {
		    set c1x [expr {$x+$dc1x}]
		    set c1y [expr {$y+$dc1y}]
		    set c2x [expr {$x+$dc2x}]
		    set c2y [expr {$y+$dc2y}]
		    set nx [expr {$x+$dx}]
		    set ny [expr {$y+$dy}]
		    lappend cmd $c1x $c1y $c2x $c2y $nx $ny
		    set x $nx
		    set y $ny
		}
	    }
	    ML {
		foreach {x y} [lrange $m 1 end] break
		lappend cmd $x $y
		foreach {x y} [lrange $c 1 end] {
		    lappend cmd $x $y
		}
	    }
	    default {
		error "unknown cmd {$cmd} in path-translate-xy"
	    }
	}
	return $cmd
    }
    proc path-translate {results} {
	#
	# concatenate mcz and mc into canvas polygon and line items
	# translate from relative to absolute coordinates
	#
	# puts "path d [join [lmap r $results {lindex $r 0}] {}]"
	set cmds {}
	set type [join [lmap r $results {lindex $r 0}] {}];
	set x 0
	set y 0
	while {[llength $results] > 0} {
	    switch -glob $type {
		mcz* {
		    lappend cmds [path-translate-xy x y {mcz} [lindex $results 0] [lindex $results 1]]
		    set results [lrange $results 3 end]
		    set type [string range $type 3 end]
		}
		mc* {
		    lappend cmds [path-translate-xy x y {mc} [lindex $results 0] [lindex $results 1]]
		    set results [lrange $results 2 end]
		    set type [string range $type 2 end]
		}
		ML* {
		    lappend cmds [path-translate-xy x y {ML} [lindex $results 0] [lindex $results 1]]
		    set results [lrange $results 2 end]
		    set type [string range $type 2 end]
		}
		default {
		    error "unexpected type $type"
		}
	    }
	}
	return $cmds
    }
    proc path-interpret {d} {
	set cmds [path-parse $d]
	set cmds [path-check-operands $cmds]
	set cmds [path-expand $cmds]
	return [path-translate $cmds]
    }
    #
    # item generators
    # oh, got the defs/use wrong
    # need to do the translation 
    # at the time of the call so
    # that parameters supplied to
    # the use can be expanded in
    # the call.
    #
    method generate-emit {window matrix code ctags} {
	if {[$self in-defs $ctags]} {
	    # set id [lindex $ctags $i+1]
	    # puts "$ctags implies definition of $id"
	    # lappend defs($id) [list $matrix $code]
	} else {
	    # puts "$ctags implies immediate code"
	    lappend immed [list $matrix $code]
	}
    }
    method generate-frag-finish {window matrix frag ctags} {
	if {[lsearch $frag -width] >= 0} { lappend ctags scale-width }
	lappend frag -tags $ctags
	$self generate-emit $window $matrix $frag $ctags
    }
    method generate-line-finish {window matrix frag fill stroke stroke-width ctags} {
	if {$stroke ne {}} { lappend frag -fill $stroke }
	if {${stroke-width} ne {}} { lappend frag -width ${stroke-width} }
	$self generate-frag-finish $window $matrix $frag $ctags
    }
    method generate-poly-finish {window matrix frag fill stroke stroke-width ctags} {
	if {$fill eq {none}} { set fill {} }
	lappend frag -fill $fill
	if {$stroke ne {}} { lappend frag -outline $stroke }
	if {${stroke-width} ne {}} { lappend frag -width ${stroke-width} }
	$self generate-frag-finish $window $matrix $frag $ctags
    }
    method generate-path {window matrix d fill stroke stroke-width ctags} {
	foreach cmd [path-interpret $d] {
	    set op [lindex $cmd 0]
	    set coords [lrange $cmd 1 end]
	    switch $op {
		mcz { $self generate-poly-finish $window $matrix [list $window create polygon {*}$coords -smooth raw] $fill $stroke ${stroke-width} $ctags }
		mc { $self generate-line-finish $window $matrix [list $window create line {*}$coords -smooth raw] $fill $stroke ${stroke-width} $ctags }
		ML { $self generate-line-finish $window $matrix [list $window create line {*}$coords] $fill $stroke ${stroke-width} $ctags }
		default { error "unknown op $op" }
	    }
	}
    }
    method generate-polygon {window matrix points fill stroke stroke-width ctags} {
	set frag [list $window create polygon {*}$points]
	$self generate-poly-finish $window $matrix $frag $fill $stroke ${stroke-width} $ctags
    }
    method generate-line {window matrix x1 y1 x2 y2 fill stroke stroke-width ctags} {
	set frag [list $window create line $x1 $y1 $x2 $y2]
	$self generate-line-finish $window $matrix $frag $fill $stroke ${stroke-width} $ctags
    }
    method generate-rect {window matrix x y width height fill stroke stroke-width ctags} {
	set frag [list $window create rectangle $x $y [expr {$x+$width}] [expr {$y+$height}]]
	$self generate-poly-finish $window $matrix $frag $fill $stroke ${stroke-width} $ctags
    }
    method generate-circle {window matrix cx cy r fill stroke stroke-width ctags} {
	set frag [list $window create oval [expr {$cx-$r}] [expr {$cy-$r}] [expr {$cx+$r}] [expr {$cy+$r}]]
	$self generate-poly-finish $window $matrix $frag $fill $stroke ${stroke-width} $ctags
    }
    method generate-ellipse {window matrix cx cy rx ry fill stroke stroke-width ctags} {
	set frag [list $window create oval [expr {$cx-$rx}] [expr {$cy-$ry}] [expr {$cx+$rx}] [expr {$cy+$ry}]]
	$self generate-poly-finish $window $matrix $frag $fill $stroke ${stroke-width} $ctags
    }
    method generate-use {window matrix pattrs id ctags} {
	# puts "use $matrix $id $ctags :: $defs($id)"
	if {[$self in-defs $ctags]} {
	    # when in defs section ignore the translation
	} else {
	    # regenerate the code 
	    # puts "use $id -> $defs($id)"
	    foreach {indent c m p tag attrs body} $defs($id) break
	    set pattrs [concat $p $pattrs]
	    set ctags [list {*}$c {*}$ctags]
	    $self element-traverse-one $window $indent $ctags $matrix $pattrs $tag $attrs $body
	}
    }

    #
    # checkers
    #
    variable tags -array {
	svg {
	    ignore-all false
	    can-be-def false
	    require {height width viewBox} ignore {id xmlns:rdf xmlns version xmlns:cc xmlns:xlink xmlns:dc}
	    body-empty false
	}
	metadata {
	    ignore-all false
	    can-be-def false
	    ignore {id}
	    body-empty false
	}
	rdf:RDF	{
	    ignore-all false
	    can-be-def false
	    body-empty false
	}
	cc:Work {
	    ignore-all false
	    can-be-def false
	    ignore rdf:about
	    body-empty false
	}
	dc:format {
	    ignore-all false
	    can-be-def false
	    body-empty false
	}
	\#text {
	    ignore-all true
	}
	dc:type {
	    ignore-all false
	    can-be-def false
	    ignore {rdf:resource}
	    body-empty false
	}
	defs {
	    ignore-all false
	    can-be-def false
	    ignore {id}
	    body-empty false
	}
	g {
	    ignore-all false
	    can-be-def true
	    permit {transform style stroke stroke-width fill x y} ignore {id}
	    body-empty false
	    attr-filler {fill {} stroke {} stroke-width {}}
	}
	path {
	    ignore-all false
	    can-be-def true
	    require {d} permit {id fill stroke stroke-width style}
	    body-empty true
	    attr-filler {fill {} stroke {} stroke-width {}}
	}
	polygon {
	    ignore-all false
	    can-be-def true
	    require {points} permit {stroke stroke-width fill} ignore {id}
	    body-empty true
	    attr-filler {fill {} stroke {} stroke-width {}}
	}
	line {
	    ignore-all false
	    can-be-def true
	    require {x1 y1 x2 y2} permit {fill stroke stroke-width} ignore {id}
	    body-empty true
	    attr-filler {fill {} stroke {} stroke-width {}}
	}
	rect {
	    ignore-all false
	    can-be-def true
	    body-empty true
	    attr-filler {fill {} stroke {} stroke-width {}}
	    require {x y width height} permit {stroke stroke-width fill} ignore {id}
	}
	circle {
	    ignore-all false
	    can-be-def true
	    body-empty true
	    attr-filler {fill {} stroke {} stroke-width {}}
	    require {cx cy r} permit {stroke stroke-width fill} ignore {id}
	}
	ellipse {
	    ignore-all false
	    can-be-def true
	    body-empty true
	    attr-filler {fill {} stroke {} stroke-width {}}
	    require {cx cy rx ry} permit {stroke stroke-width fill} ignore {id}
	}
	use {
	    ignore-all false
	    can-be-def true
	    body-empty true
	    attr-filler {fill {} stroke {} stroke-width {}}
	    require {xlink:href} permit {transform style fill stroke stroke-width x y} ignore {id}
	}
    }
    
    method tag-test {tag test} {
	array set info $tags($tag)
	return $info($test)
    }
    method ignore-all {tag} {
	return [$self tag-test $tag ignore-all]
    }
    method can-be-def {tag} {
	return [$self tag-test $tag can-be-def]
    }
    method attr-check {tag attributes} {
	array set info $tags($tag)
	array set b $attributes
	set missing {}
	foreach treatment {require permit ignore} {
	    if { ! [info exists info($treatment)]} continue
	    set attrs $info($treatment)
	    foreach attr $attrs { 
		set e [info exists b($attr)]
		switch $treatment {
		    require { if {$e} { unset b($attr) } else { lappend missing $attr } }
		    permit { if {$e} { unset b($attr) } }
		    ignore { if {$e} { unset b($attr) } }
		    default { error "unknown attribute treatment: $treatment" }
		}
	    }
	}
	set leftovers [array names b]
	if {$missing ne {} || $leftovers ne {}} {
	    error "attr-check $tag leftovers {$leftovers} missing {$missing}"
	}
    }
    proc attr-filter {attrs} {
	set fattrs {}
	foreach {name value} $attrs {
	    if {$name in {fill stroke stroke-width}} {
		lappend fattrs $name $value
	    }
	}
	return $fattrs
    }
    method body-empty {tag body} {
	if {[$self tag-test $tag body-empty] && $body ne {}} { 
	    error "$tag body is not empty {$body}"
	}
    }
    method interesting-id {tag attrs} {
	array set a $attrs
	if { ! [info exists a(id)]} { return 0 }
	set id $a(id)
	if {[regexp ^$tag\\d+$ $id]} {
	    #puts "$tag id=$id is uninteresting"
	    return 0
	}
	if {$tag eq {path} && [regexp ^circle\\d+$ $id]} {
	    #puts "$tag id=$id is uninteresting"
	    return 0
	}
	if {[info exists targets($id)]} {
	    error "$tag $id already defined as $targets($id)"
	}
	#puts "saving $tag $id"
	set targets($id) $tag
	return 1
    }
    method interesting-target {tag attrs} {
	array set a $attrs
	if { ! [info exists a(xlink:href)]} { error "$tag has no href attribute" }
	set href $a(xlink:href)
	if {[string first \# $href] != 0} { error "$tag href $href does not start with #" }
	set href [string range $href 1 end]
	if { ! [info exists targets($href)]} { error "$tag href $href is not defined" }
	return $href
    }
    proc unpack-style {tag attrs} {
	array set a $attrs
	if {[info exists a(style)]} {
	    switch -regexp $a(style) {
		fill:#[0-9a-f]+ { return [list fill [string range $a(style) 5 end]] }
		stroke:#[0-9a-f]+ { return [list stroke [string range $a(style) 7 end]] }
		default { error "$tag unhandled style $a(style)" }
	    }
	}
	return {}
    }
    method build-attrs {tag attrs pattrs} {
	array set info $tags($tag)
	if {[info exists info(attr-filler)]} {
	    array set a [concat $info(attr-filler) $pattrs $attrs]
	    array set a [unpack-style $tag $attrs]
	} else {
	    array set a [concat $pattrs $attrs]
	}
	return [array get a]
    }
    
    proc lremove {list item} {
	set i [lsearch $list $item]
	if {$i >= 0} {
	    set list [lreplace $list $i $i]
	}
	return $list
    }

    method in-defs {ctags} {
	return [expr {$defsid ne {} && [lsearch $ctags $defsid] >= 0}]
    }
    
    # traverse a document tree $doc
    # using $indent as an indentation string
    # and $ctags as the inherited canvas tags
    # and $pattrs as the inherited attributes
    method element-traverse {window indent ctags matrix pattrs doc} {
	foreach {tag attrs body} $doc {
	    $self element-traverse-one $window $indent $ctags $matrix $pattrs $tag $attrs $body
	}
    }
    method element-traverse-one {window indent ctags matrix pattrs tag attrs body} {
	#element-setup $tag $attrs $body
	# if {$indent in {{} { } {  }}} { puts stdout "$indent$tag $attrs" }
	if {[$self ignore-all $tag]} return
	$self attr-check $tag $attrs
	$self body-empty $tag $body
	array set a [$self build-attrs $tag $attrs $pattrs]
	if {[info exists a(id)] && $a(id) ni $ctags} { lappend ctags $a(id) }
	if {[$self can-be-def $tag] && [$self in-defs $ctags] && [$self interesting-id $tag $attrs]} {
	    set defs($a(id)) [list $indent [lremove $ctags $defsid] $matrix $pattrs $tag $attrs $body]
	}
	switch $tag {
	    svg -
	    metadata -
	    rdf:RDF -
	    cc:Work -
	    dc:format -
	    dc:type {}
	    defs { 
		set defsid $a(id)
	    }
	    g {
		set matrix [transform-interpret $tag $attrs $matrix]
		set pattrs [attr-filter [array get a]]
	    }
	    path {
		$self generate-path $window $matrix $a(d) $a(fill) $a(stroke) $a(stroke-width) $ctags
	    }
	    polygon {
		$self generate-polygon $window $matrix $a(points) $a(fill) $a(stroke) $a(stroke-width) $ctags
	    }
	    line {
		$self generate-line $window $matrix $a(x1) $a(y1) $a(x2) $a(y2) $a(fill) $a(stroke) $a(stroke-width) $ctags
	    }
	    rect {
		$self generate-rect $window $matrix $a(x) $a(y) $a(width) $a(height) $a(fill) $a(stroke) $a(stroke-width) $ctags
	    }
	    circle {
		$self generate-circle $window $matrix $a(cx) $a(cy) $a(r) $a(fill) $a(stroke) $a(stroke-width) $ctags
	    }
	    ellipse {
		$self generate-ellipse $window $matrix $a(cx) $a(cy) $a(rx) $a(ry) $a(fill) $a(stroke) $a(stroke-width) $ctags
	    }
	    use {
		# call definition
		set x 0; if {[info exists a(x)]} { set x $a(x) }
		set y 0; if {[info exists a(y)]} { set y $a(y) }
		set matrix [transform-interpret $tag $attrs $matrix]
		if {$x != 0 || $y != 0} {
		    set matrix [matrix-mul-matrix $matrix [matrix-from-translate $x $y] ]
		}
		set id [$self interesting-target $tag $attrs]
		$self generate-use $window $matrix [attr-filter [array get a]] $id $ctags
	    }
	    default {
		puts stderr "missing tag $tag"
	    }
	}
	foreach item $body { $self element-traverse $window "$indent " $ctags $matrix $pattrs $item }
    }

    #
    # parse an svg document
    #
    method parse {doc} {
	$self element-traverse .svg {} {} [abcdef-to-matrix {1 0 0 1 0 0}] {} [xml2list $doc] 
    }
    method defs {{pattern *}} {
	return [array names defs $pattern]
    }
    variable cache -array {}
    method draw-cache {window svgid ctags} {
	foreach record $cache($svgid) {
	    foreach {matrix code} $record break
	    set abcdef [matrix-to-abcdef $matrix]
	    set cid [{*}$code]
	    # puts "$cid <- $code"
	    set xscale [lindex $abcdef 0]
	    set yscale [lindex $abcdef 3]
	    set xmove [lindex $abcdef 4]
	    set ymove [lindex $abcdef 5]
	    $window scale $cid 0 0 $xscale $yscale
	    $window move $cid $xmove $ymove
	    foreach t $ctags { $window addtag $t withtag $cid }
	    if {[lsearch [$window itemcget $cid -tags] scale-width] >= 0} {
		set width [$window itemcget $cid -width]
		$window itemconfigure $cid -width [expr {$xscale*$width}]
		# puts "$cid [$window itemcget $cid -tags] $width -> [expr {$xscale*$width}]"
	    }
	}	
    }
    method draw {window svgid x y sx sy ctags} {
	if { ! [info exists cache($svgid)]} {
	    set immed {}
	    set matrix [matrix-mul-matrix [matrix-from-translate $x $y] [matrix-from-scale $sx $sy]]
	    $self generate-use $window $matrix {} $svgid {}
	    set cache($svgid) $immed
	}
	$self draw-cache $window $svgid $ctags
	return $ctags
    }
}

#
# I currently render the tiles svg file into a png using inkscape. The svg renders into
# an image with two rows of 44 tiles each.  The top row contains the unselected images 
# and the bottom row the selected images.  The list initializing the -tiles option below
# gives the names of the tiles.
#
# This set of tile images includes a spare white dragon, one drawn with Ubuntu branding 
# and the other rendering as a blank white tile.  A complete game set includes four of 
# each tile except for the seasons and flowers bonus tiles, which are each a set of four
# as they come.
#
# The mahjong::tiles type runs inkscape to create an appropriately sized image and then
# splits the tile images out of the resulting png.  It would be better to generate the
# images without the use of inkscape.  A full set of game tile names are defined and the
# appropriate tile images are associated with each tile name.
#
snit::type mahjong::tiles {
    option -svg -default {} -readonly true
    option -data -default {} -readonly true
    option -width -default 64 -configuremethod Configure
    option -height -default 88 -configuremethod Configure
    option -tiles -readonly true -default {
	one-coin two-coins three-coins four-coins five-coins six-coins seven-coins eight-coins nine-coins
	north-wind west-wind south-wind east-wind red-dragon green-dragon
	one-character two-character three-character four-character five-character six-character seven-character eight-character nine-character 
	one-bamboo two-bamboo three-bamboo four-bamboo five-bamboo six-bamboo seven-bamboo eight-bamboo nine-bamboo 
	season-1 season-2 season-3 season-4 white-dragon flower-1 flower-2 flower-3 flower-4 {}
    }
    option -pieces -readonly true
    option -normal -readonly true
    option -select -readonly true

    variable map [dict create]

    component svg

    constructor {args} {
	$self configure {*}$args

	set n [llength $options(-tiles)]
	set twid $options(-width)
	set thgt [expr {$twid*11/8}]
	set options(-height) $thgt
	if {$options(-data) ne {}} {
	    set svg [mahjong::svg $self.svg -data $options(-data)]
	} elseif {$options(-svg) ne {}} {
	    set svg [mahjong::svg $self.svg -file $options(-svg)]
	}
	set options(-normal) {}
	set options(-select) {}
	for {set i 0} {$i < $n} {incr i} {
	    set name [lindex $options(-tiles) $i]
	    if {$name ne {}} {
		switch -glob $name {
		    season-* - flower-* { set card 1 }
		    default { set card 4 }
		}
		for {set j 1} {$j <= $card} {incr j} {
		    set tname "$name#$j"
		    dict set map $tname name $name
		    if {$card == 4} {
			dict set map $tname match $name
		    } else {
			dict set map $tname match [string range $name 0 end-2]
		    }
		}
	    }
	}
    }
    # tiles returns a complete tile set, list of name#instance
    method get-tiles {} { return [dict keys $map] }
    # normal returns the normal image for a tile
    method normal {name} { return [list plain-$name face-$name] } 
    # select returns the selected image for a tile
    method select {name} { return [list selected-$name face-$name] } 
    # match tests if the first tile matches the second tile
    method match {name1 name2} { return [expr {[dict get $map $name1 match] eq [dict get $map $name2 match]}] }
    # draw a tile
    method draw {window tile x y s} {
	$svg draw $window selected-tile $x $y $s $s [list $tile selected]
	$svg draw $window plain-tile $x $y $s $s [list $tile plain]
	$svg draw $window [dict get $map $tile name] $x $y $s $s [list $tile face]
    }
    method Configure {opt val} {
	switch -- $opt {
	    -width { 
		set options(-width) $val
		set options(-height) [expr {11*$val/8}]
	    }
	    -height {
		set options(-height) $val
		set options(-width) [expr {8*$val/11}]
	    }
	}
    }
}

proc report-option-classes {win {indent {}}} {
    puts "$win [winfo class $win]"
    foreach o [$win configure] {
	if {[llength $o] < 5} continue
	foreach {opt name class val val} $o break
	puts "$win.$name $class"
	if {$name eq {style}} { puts "$win.style == [$win cget -style]" }
    }
    foreach c [winfo children $win] {
	report-option-classes $c
    }
}

snit::widgetadaptor mahjong::canvas {
    option -layout -readonly true
    option -tiles -readonly true
    option -prefs -readonly true
    option -shuffled-tiles -readonly true
    option -shuffled-slots -readonly true
    option -offsets -default {0 0} -readonly true

    option -title mahjong
    option -game -default 0
    option -start-timer 0
    option -stop-timer 0
    option -remaining-moves 0
    option -remaining-tiles 0
    
    option -trace false
    option -infinite false
    option -watch true
    option -raw-deal false

    component layout
    component tiles

    delegate option -width to tiles
    delegate option -height to tiles

    delegate method get-tiles to tiles
    delegate method match to tiles

    delegate method set-slot to layout
    delegate method set-empty to layout
    delegate method layer-slots to layout
    delegate method is-endcap to layout
    delegate method is-naked-endcap to layout
    delegate method z-shadow to layout
    delegate method x-adjacent to layout
    delegate method can-unplay to layout
    delegate method can-play to layout
    
    delegate option * to hull
    delegate method * to hull
    
    variable data [dict create selected {} paused false]
    
    constructor {args} {
	if {$::usetkpath} {
	    installhull using ::tkp::canvas
	} else {
	    installhull using ::canvas
	}
	bind $win <Destroy> [list {*}[mymethod destroy-window] %W]
	bind $win <Configure> [list {*}[mymethod adjust-window] %W]
	bind $win <Button-3> [list {*}[mymethod menu-popup] %W %x %y]
	$self configure {*}$args
	set layout $options(-layout)
	set tiles $options(-tiles)
	$self menu-build
	$self initialize-window
    }
    
    method set-name-slot {name slot} { dict set data name-to-slot $name $slot }
    method get-name-slot {name} { return [dict get $data name-to-slot $name] }
    method set-slot-name {slot name} { $options(-layout) set-slot $slot $name }
    method get-slot-name {slot} { return [$options(-layout) get-slot $slot] }
    method is-empty-slot {slot} { return [$options(-layout) is-empty $slot] }
    method get-all-slots {} { return [$options(-layout) get-slots] }
    
    method get-remaining-tiles {} {
	return [lmap name [$self get-tiles] {expr {[$self get-name-slot $name] ne {} ? $name : [continue]}}]
    }

    method tile-sizes {} {
	set twid [$self cget -width];   # tile width
	set thgt [$self cget -height];  # tile height
	set xstep [expr {$twid/10.0}];  # offset for 3d border
	set ystep [expr {$thgt/11.0}];  # offset for 3d border
	set fwid [expr {$twid-$xstep}];	# tile face width
	set fhgt [expr {$thgt-$ystep}];	# tile face height
	return [list $twid $thgt $xstep $ystep $fwid $fhgt]
    }

    method xy-for-slot {slot} {
	foreach {twid thgt xstep ystep fwid fhgt} [$self tile-sizes] break
	foreach {x y z} $slot break;	# slot
	set x [expr {$x*$fwid + $z*$xstep}]
	set y [expr {$y*$fhgt - $z*$ystep}]
	return [list $x $y]
    }

    # context menu, button 3 or 2 on the background
    # with single character accelerators on the root window
    method menu-build {} {
	# popup menu
	menu .m -tearoff no
	set accels {}
	foreach record {
	    {command n {New Game} new-game}
	    {command o {Restart} restart-game}
	    {separator}
	    {command p {Pause} pause-game}
	    {command c {Continue} continue-game}
	    {separator}
	    {command h {Hint} hint}
	    {command u {Undo} undo}
	    {command r {Redo} redo}
	    {separator}
	    {hint m {Menu} menu-menu}
	    {command s {Scores} scores}
	    {command f {Preferences} preferences}
	    {command ? {Help} help}
	    {separator}
	    {command b {By Name} by-name}
	    {menu {} {Draw Frame} draw-frame {0 1 2 3 4 5 6}}
	    {separator}
	    {command q {Quit} quit-game}
	} {
	    foreach {entry accelerator label meth var} $record break
	    if {$record ne {separator}} {
		if {[lsearch -exact $accels $accelerator] >= 0} { error "duplicate accelerator for $record" }
		lappend accels $accelerator
	    }
	    switch $entry {
		separator {
		    .m add separator
		}
		command {
		    .m add command -accelerator $accelerator -label $label -command [mymethod $meth]
		    if {$accelerator eq {?}} { set accelerator question }
		    bind . <KeyPress-$accelerator> [list {*}[mymethod menu-protect] $label $meth]
		}
		checkbutton {
		    .m add checkbutton -accelerator $accelerator -label $label -variable [myvar $var]
		    bind . <KeyPress-$accelerator> [list {*}[mymethod menu-protect] $label $meth]
		}
		hint {
		    .m add command -accelerator $accelerator -label $label
		    bind . <KeyPress-$accelerator> [mymethod $meth]
		}
		menu {
		    menu .m.$meth -tearoff no
		    .m add cascade -label $label -menu .m.$meth
		    foreach i $var {
			.m.$meth add radiobutton -label "Level $i" -value $i -command [list {*}[mymethod $meth] $i]
		    }
		}
		default {
		    error "unexpected menu entry command $entry"
		}
	    }
	}
    }
    # popup the menu when we are over the background
    method menu-popup {w x y} {
	if {[$win find withtag current] eq {}}  { tk_popup .m $x $y }
    }
    # enable and disable lists of menu entries
    method menu-enable-disable {enable disable} {
	foreach label $enable { .m entryconfigure $label -state normal }
	foreach label $disable { .m entryconfigure $label -state disabled }
    }
    # protect an accelerator from calling the entry function when disabled
    method menu-protect {label meth} {
	# puts "$self menu-protect $label $meth"
	if {[.m entrycget $label -state] eq {normal}} {
	    $self $meth
	}
    }
    
    ##
    ## menu functions
    ##
    method first-game {} {
	if {$options(-game) ne {0}} {
	    $self trace-puts "new-game $options(-game)"
	    $self new-game [scan-game $options(-game)]
	} else {
	    set game [clock seconds]
	    $self trace-puts "new-game [format-game $game]"
	    $self new-game $game
	}
	if {$options(-infinite)} {
	    while {1} {
		set game [clock seconds]
		$self trace-puts "new-game [format-game $game]"
		$self new-game $game
	    }
	}
    }
    
    method new-game {{game {}}} {
	$self setup $game
	while {[catch {$self restart} error]} {
	    if {$error eq {cannot unplay}} {
		# $self trace-puts "$error\n$::errorInfo"
		set options(-shuffled-slots) [shuffle $options(-shuffled-slots)]
		$self trace-puts "retrying new game"
	    } else {
		$self trace-puts "$error\n$::errorInfo"
		set options(-shuffled-slots) [shuffle $options(-shuffled-slots)]
		$self trace-puts "retrying new game"
	    }
	}
    }
    method restart-game {} { $self restart }
    method pause-game {} {
	$self clear-selected
	dict set data paused true
	$self pause-timer
	foreach tile [$self get-remaining-tiles] { $self show [$self get-name-slot $tile] $tile blank }
	$self menu-enable-disable {{Continue}} {{New Game} {Restart} {Pause} {Hint} {Undo} {Redo} {Scores} {Preferences} {Help}}
    }
    method continue-game {} {
	$self menu-enable-disable {{New Game} {Restart} {Pause} {Hint} {Undo} {Redo} {Scores} {Preferences}} {{Continue}}
	foreach tile [$self get-remaining-tiles] { $self show [$self get-name-slot $tile] $tile plain }
	$self continue-timer
	dict set data paused false
	
    }
    method hint {} {
	set slots [concat {*}[$self find-moves]]
	if {$slots ne {}} {
	    dict incr data hint
	    set slot [lindex $slots [expr {[dict get $data hint]%[llength $slots]}]]
	    $self set-selected $slot [$self get-slot-name $slot]
	}
    }
    method undo {} { $self history-undo }
    method redo {} { $self history-redo }
    
    method menu-menu {} { $self menu-popup . 100 100 }
    
    method scores {} {}
    method preferences {} {}
    method help {} { puts "help called" }
    method by-name {} {
	toplevel .byname
	wm title .byname {By Name}
	grid [ttk::label .byname.l -text {Choose game by name}] -row 1 -column 0 -columnspan 2 -sticky ew 
	grid [ttk::entry .byname.e] -row 2 -column 0 -columnspan 2 -sticky ew
	.byname.e insert end [format-game $options(-game)]
	grid [ttk::button .byname.okay -text Okay -command [list {*}[mymethod by-name-finish] okay]] -row 3 -column 0 -sticky ew
	grid [ttk::button .byname.cancel -text Cancel -command [list {*}[mymethod by-name-finish] cancel]] -row 3 -column 1 -sticky ew
	#report-option-classes .byname
    }
    method by-name-finish {how} {
	if {$how eq {okay}} { 
	    set options(-game) [scan-game [.byname.e get]]
	    destroy .byname
	    $self new-game $options(-game)
	} else {
	    destroy .byname
	}
    }
    method draw-frame {level} {
	$win delete frame
	foreach {twid thgt xstep ystep fwid fhgt} [$self tile-sizes] break
	foreach slot [$self layer-slots $level] {
	    foreach {x y} [$self xy-for-slot $slot] break
	    set x [expr {$x+$xstep}]
	    $win create rectangle $x $y [expr {$x+$fwid}] [expr {$y+$fhgt}] -fill {} -outline white -tags frame
	    $win create text [expr {$x+10}] [expr {$y+$ystep+10}] -anchor nw -text $slot -fill white -tags frame
	}
	$win lower frame
	$win move frame {*}$options(-offsets)
    }
	
    method quit-game {} { destroy . }
    
    ##
    ## window display helpers
    ##
    method apply-offsets {offsets} { $win move all {*}$offsets }
    method invert-offsets {offsets} { return [lmap a $offsets {expr {-$a}}] }
    method rescale {s} { 
	$win scale all 0 0 $s $s
	if {[dict exists $data coords]} {
	    set coords [dict get $data coords]
	    foreach name [dict keys $coords] {
		dict set coords $name [lmap x [dict get $coords $name] {expr {$s*$x}}]
	    }
	    dict set data coords $coords
	}
	foreach id [$win find withtag scale-width] {
	    $win itemconfigure $id -width [expr {$s*[$win itemcget $id -width]}]
	}
    }
    # compute the xoff yoff that centers the current 
    method adjust-window {window} {
	if {$window ne $win} return
	if {[set w [winfo width $win]] == 1} return
	if {[set h [winfo height $win]] == 1} return
	$self trace-puts "adjust-window"
	# undo current offsets
	$self apply-offsets [$self invert-offsets $options(-offsets)]
	# compute new scale and apply
	set width [expr {int(64*min(($w/64.0)/11.0, ($h/88.0)/7.0))}]
	$self rescale [expr {double($width)/[$self cget -width]}]
	$self configure -width $width
	# compute and apply new offsets
	# these should be face height and width plus one 3d border
	foreach {twid thgt xstep ystep fwid fhgt} [$self tile-sizes] break
	set lwidth [expr {11*$fwid+$xstep}]
	set lheight [expr {7*$fhgt+$ystep}]
	set xoff [expr {($w-($lwidth))/2}]
	set yoff [expr {($h-($lheight))/2}]
	set options(-offsets) [list $xoff $yoff]
	$self apply-offsets $options(-offsets)
	# $self check-all-tile-coords
    }
    

    method check-tile-coords {slot name} {
	set bbox [$win bbox $name]
	if {$bbox eq {}} return
	foreach {x1 y1 x2 y2} $bbox break
	foreach {x y z} $slot break
	foreach {cx cy} [dict get $data coords $name] break
	foreach {xo yo} $options(-offsets) break
	set dx [expr {($x1-$xo)}]
	set dy [expr {($y1-$yo)}]
	if {pow($dx-$cx,2)+pow($dy-$cy,2) > ([$self cget -width]+[$self cget -height])/10} {
	    $self trace-puts "$slot $name $dx $dy $cx $cy [$self xy-for-slot $slot] [lsearch $options(-shuffled-tiles) $name]"
	}
    }
    
    method check-all-tile-coords {} {
	$self trace-puts "check-all-tile-coords"
	set empties 0
	set slots {}
	set names {}
	foreach slot [$self get-all-slots] {
	    if {[$self is-empty-slot $slot]} continue
	    $self check-tile-coords $slot [$self get-slot-name $slot]
	}
    }
		
    method destroy-window {window} {
	if {$window ne $win} return
	if {[catch {$self save-prefs} error]} { $self trace-puts "save-prefs: $error\n$::errorInfo" }
    }
    
    method initialize-window {} {
	if {[catch {$self load-prefs} error]} { $self trace-puts "load-prefs: $error\n$::errorInfo" }
	if {[catch {$self load-scores} error]} { $self trace-puts "load-scores: $error\n$::errorInfo" }
    }

    method save-prefs {} {
	$options(-prefs) save-prefs [list \
					 zoomed [wm attributes . -zoomed] \
					 fullscreen [wm attributes . -fullscreen] \
					 geometry [wm geometry .] \
					]
    }
    method save-scores {} {
	$options(-prefs) save-scores [dict get $data scores]
    }
    method load-prefs {} {
	array set prefs [$options(-prefs) load-prefs]
	# $self trace-puts "load-prefs prefs are {[array get prefs]}"
	if {[info exists prefs(fullscreen)] && $prefs(fullscreen)} {
	    wm attributes . -fullscreen 1
	} elseif {[info exists prefs(zoomed)] && $prefs(zoomed)} {
	    wm attributes . -zoomed 1
	} elseif {[info exists prefs(geometry)]} {
	    wm geometry . $prefs(geometry)
	}
    }
    method load-scores {} {
	dict set data scores [$options(-prefs) load-scores]
    }
    ##
    ## game play helpers
    ##
    method get-items {} { return $options(-items) }
    
    proc shuffle {oldlist} {
	set n [llength $oldlist]
	set list $oldlist
	for {set i 0} {$i < $n} {incr i} {
	    set j [expr {$i+int(rand() * ($n-$i))}]
	    if {$i != $j} {
		set li [lindex $list $i]
		set lj [lindex $list $j]
		set list [lreplace [lreplace $list $j $j $li] $i $i $lj]
	    }
	}
	return $list
    }
    
    method sort-matching {names} {
 	set sort {}
 	while {[llength $names] > 0} {
 	    set name1 [lindex $names 0]
 	    set names [lrange $names 1 end]
 	    lappend sort $name1
 	    for {set n2 0} {$n2 < [llength $names]} {incr n2} {
 		set name2 [lindex $names $n2]
 		if {[$self match $name1 $name2]} {
 		    lappend sort $name2
 		    set names [lreplace $names $n2 $n2]
 		    break
 		}
 	    }
 	}
 	# $self trace-puts [lmap i $sort {$self item-to-name $i}]
 	return $sort
    }
    
    method sort-fertility {slots} {
	set plain {}
	set endcaps {}
	foreach slot $slots {
	    if {[$self is-naked-endcap $slot]} {
		lappend endcaps $slot
	    } else {
		lappend plain $slot
	    }
	}
	return [concat $plain $endcaps]
    }

    method raise-in-render-order {} {
	foreach slot [$self get-all-slots] {
	    $win raise [$self get-slot-name $slot]
	}
    }
    
    ##
    ## window title bar status
    ##
    method start-status {} {
	if { ! [dict exists $data status-started]} {
	    dict set data status-started [after 100 [list {*}[mymethod update-status]]]
	}
    }
    
    method update-status {} {
	set gname [format-game $options(-game)]
	set elapsed [$self elapsed-time]
	set elapsed [format {%d:%02d} [expr {$elapsed/60}] [expr {$elapsed%60}]]
	wm title . "$options(-title) - $gname - $elapsed - $options(-remaining-moves) moves, $options(-remaining-tiles) tiles"
	dict set data status-started [after 100 [list {*}[mymethod update-status]]]
    }
    
    method reset-timer {} {
	set options(-start-timer) 0
	set options(-stop-timer) 0
    }
    method start-timer {} {
	if {$options(-start-timer) == 0} { set options(-start-timer) [clock seconds] }
    }
    method stop-timer {} {
	if {$options(-stop-timer) == 0} { set options(-stop-timer) [clock seconds] }
    }
    method pause-timer {} {
	if {$options(-stop-timer) == 0} { set options(-stop-timer) [clock seconds] }
    }
    method continue-timer {} {
	if {$options(-stop-timer) != 0} {
	    set options(-start-timer) [expr {[clock seconds]-($options(-stop-timer)-$options(-start-timer))}]
	    set options(-stop-timer) 0
	}
    }
    method elapsed-time {} {
	if {$options(-start-timer) == 0} {
	    return 0
	} elseif {$options(-stop-timer) != 0} {
	    return [expr {$options(-stop-timer) - $options(-start-timer)}]
	} else {
	    return [expr {[clock seconds] - $options(-start-timer)}]
	}
    }
    
    method score-game {time elapsed game result} {
	dict lappend data scores [list $time $elapsed $game $result]
	$self save-scores
    }
    method update-score {} {
	set options(-remaining-moves) [$self count-moves]
	if {$options(-remaining-moves) == 0} {
	    $self stop-timer
	    $self score-game [clock seconds] [$self elapsed-time] $options(-game) $options(-remaining-tiles)
	    if {$options(-remaining-tiles) > 0} {
		# game lost
		set title {There are no more moves.}
		set text [string cat {Each puzzle has at least one solution.} \
			      { You can undo your moves and try and find the solution,}\
			      { restart this game, start a new one, or give up.}]
		set bitmap {}
		set idefault 0
		switch [tk_dialog .gameover $title $text $bitmap $idefault Undo Restart {New game} {Quit}] {
		    1 { $self restart-game }
		    2 { $self new-game }
		    3 { $self quit-game }
		    default { 
			$self continue-timer
			$self undo 
		    }
		}
	    } else {
		# game won, open scores dialog
		set title {You won.}
		set text {Congratulations, you have solved the puzzle.}
		set bitmap {}
		set idefault 0
		switch [tk_dialog .gameover $title $text $bitmap $idefault {New game} Restart {Quit}] {
		    0 { $self new-game }
		    1 { $self restart-game }
		    2 { $self quit-game }
		    -1 { $self new-game }
		}
	    }
	}
    }
    
    method count-moves {} {
	return [llength [$self find-moves]]
    }
    
    proc format-game {game} {
	while {$game != 0} {
	    set c [expr {$game%26}]
	    set game [expr {$game/26}]
	    lappend format [lindex {a b c d e f g h i j k l m n o p q r s t u v w x y z} $c]
	}
	return [join [lreverse $format] {}]
    }
    
    proc scan-game {game} {
	set n 0
	foreach c [split $game {}] {
	    set n [expr {$n*26+[lsearch {a b c d e f g h i j k l m n o p q r s t u v w x y z} $c]}]
	}
	return $n
    }
    
    ##
    ## history maintenance
    ##
    method history-empty {} {
	dict set data history [dict create {*}{
	    count 0
	    future 0
	    items {}
	}]
	dict with data history {
	    $self menu-enable-disable {} {Undo Redo}
	}
    }
    method history-save-reversed {} {
	dict with data history {
	    return [dict create count 0 future $future items [lreverse $items]]
	}
    }
    method history-restore {old} {
	$self clear-selected
	dict set data history $old
	dict with data history {
	    if {$count < $future} {
		$self menu-enable-disable {Undo Redo} {}
	    } else {
		$self menu-enable-disable {Undo} {Redo}
	    }
	}
    }
    method history-get-count {} { return [dict get $data history count] }
    method history-get-future {} { return [dict get $data history future] }
    method history-get-items {} { return [dict get $data history items] }
    method history-add {nm1 sl1 nm2 sl2} {
	$self clear-selected
	dict with data history {
	    if {[llength $items] > $count} {
		set items [lrange $items 0 $count-1]
	    }
	    lappend items [list $nm1 $sl1 $nm2 $sl2]
	    incr count 1
	    set future $count
	    $self menu-enable-disable {Undo} {Redo}
	}
    }
    method history-undo {} {
	# step back
	$self clear-selected
	dict with data history {
	    incr count -1
	    $self move-place {*}[lindex $items $count]
	    if {$count > 0} {
		$self menu-enable-disable {Undo Redo} {}
	    } else {
		$self menu-enable-disable {Redo} {Undo}
	    }
	}
	$self update-score
    }
    method history-redo {} {
	# step forward
	$self clear-selected
	dict with data history {
	    $self move-unplace {*}[lindex $items $count]
	    incr count 1
	    if {$count < $future} {
		$self menu-enable-disable {Undo Redo} {}
	    } else {
		$self menu-enable-disable {Undo} {Redo}
	    }
	}
	$self update-score
    }
    
    ##
    ## setup the next game
    ##
    method setup {{game {}}} {
	# set up for a new game which might be restarted
	# so, game number seeds random number generator, 
	# results in shuffle of -slots and -tiles
	# the optional $game may be supplying a game by name
	# or simply the time
	if {$game eq {}} { set game [clock seconds] }
	set options(-game) $game
	expr {srand($options(-game))}
	set options(-shuffled-slots) [shuffle [$self get-all-slots]]
	set options(-shuffled-tiles) [$self sort-matching [shuffle [$self get-tiles]]]
	$self start-status
    }
    
    ##
    ## start or restart the currently setup game
    ##
    method restart {} {
	# reset timer
	$self reset-timer
	# clear selection
	$self clear-selected
	# reset slot to name map
	foreach slot [$self get-all-slots] { 
	    set name [$self get-slot-name $slot]
	    if {[$self tile-is-placed $slot $name]} {
		$self tile-unplace $slot $name
		if {$options(-watch)} update
	    }
	    $self set-slot-name $slot {}
	}
	# reset name to slot map
	foreach name [$self get-tiles] { $self set-name-slot $name {} }
	
	# pick matching pairs from available
	set names $options(-shuffled-tiles)
	set slots $options(-shuffled-slots)
	set moves {}
	set options(-remaining-tiles) 0
	
	# make an initial update
	if {$options(-watch)} update
	
	while {[llength $names]} {
	    if {$options(-remaining-tiles) != 144-[llength $names]} {
		puts "-remaining-tiles $options(-remaining-tiles) != 144-llength names 144-[llength $names]"
	    }
	    if {$options(-remaining-tiles) != [llength [$self get-remaining-tiles]]} {
		puts "-remaining-tiles $options(-remaining-tiles) !=  llength get-remaining-tiles [llength [$self get-remaining-tiles]]"
	    }

	    ## choose the pair of matched tiles to play
	    # take first and second tiles in name list
	    foreach {name1 name2} $names break
	    set names [lrange $names 2 end]

	    # take first open slot in slot list
	    set slot1 [$self find-can-unplay $slots]
	    if {$slot1 eq {}} {
		$self trace-puts "slot1 eq {}"
		break
	    }
	    set s1 [lsearch $slots $slot1]
	    set slots [lreplace $slots $s1 $s1]

	    # put the first tile in its slot
	    $self tile-place $slot1 $name1
	    lappend moves $name1 $slot1

	    if {$options(-watch)} update

	    # take next open slot in slot list
	    # but avoid slots that block $slot1
	    set slot2 [$self find-can-unplay $slots $slot1]

	    while {$slot2 eq {}} {
		# there is no unplayable slot2 that doesn't block slot1
		# undo the unplay farthest from slot1, return the unplayed
		# slots and names to the todo lists, and retry slot2 search
		set bestm {}
		set bestd -1
		foreach m [$self find-moves] {
		    # okay, so the pairs of matching tiles found by search
		    # may not have been unplayed as a pair, which will
		    # make it hard to remove them from the $moves list
		    # so reject pairs that aren't moves in $moves
		    if { ! [$self is-an-unplayed-move {*}$m $moves]} {
			$self trace-puts "! is-an-unplayed-move $m"
			continue
		    }
		    if {[set d [move-distance $slot1 {*}$m]] > $bestd} {
			set bestm $m
			set bestd $d
		    }
		    $self trace-puts "move-distance $m is $d"
		}
		$self trace-puts "bestm is $bestm at distance $bestd"
		# since we are only attempting to undo previously completed moves
		# we won't try to undo slot1 because it's only half a move
		# but we might still be digging a hole and filling it back in
		# if we are too close
		if {$bestm ne {} && $bestd > 7.0} {
		    # undo $bestm
		    $self trace-puts "undoing {$bestm} at $bestd"
		    foreach {moves slots names} [$self undo-unplayed-move {*}$bestm $moves $slots $names] break
		    # redo the search for slot2
		    set slot2 [$self find-can-unplay $slots $slot1]
		    continue
		}
		$self trace-puts "slot2 eq {} backing out $slot1"
		# undo move
		# $self trace-puts "undo move"
		set moves [lrange $moves 0 end-2]
		# $self trace-puts "tile-unplace $slot1 $name1"
		$self tile-unplace $slot1 $name1
		# undo damage
		if {$s1 < [llength $slots]} {
		    set slots [lreplace $slots $s1 $s1 $slot1]
		} else {
		    lappend slots $slot1
		}
		set names [list $name1 $name2 {*}$names] 
		# $self trace-puts "breaking loop"
		# this used to break out of the search loop
		# now it only breaks the slot2 re-search loop
		break
	    }

	    # break the search loop if slot2 failed
	    if {$slot2 eq {}} break
	    
	    set s2 [lsearch $slots $slot2]
	    set slots [lreplace $slots $s2 $s2]
	    
	    # put the second tile in its slot
	    $self tile-place $slot2 $name2
	    
	    # make backwards history
	    lappend moves $name2 $slot2
	    
	    if {$options(-watch)} update
	    
	    # test for forward playability
	    if { ! [$self can-play $slot1]} {
		$self trace-puts "proposed move slot1 $slot1 cannot play"
		break
	    } elseif { ! [$self can-play $slot2]} {
		$self trace-puts "proposed move slot2 $slot2 cannot play"
		break
	    } elseif { ! [$self match $name1 $name2]} {
		$self trace-puts "proposed move mismatches $nm1 and $nm2"
		break
	    }
	}

	# make and save the history of the play
	# this allows the construction of the deal to be played in reverse
	# at the start of each game by redoing moves
	$self history-empty
	foreach {name1 slot1 name2 slot2} $moves {
	    $self history-add $name1 $slot1 $name2 $slot2
	}
	$self history-restore [$self history-save-reversed]
	
	# raise slots in render order
	$self raise-in-render-order
	
	# adjust window
	$self adjust-window $win
	
	# compute
	if {$options(-remaining-tiles) != [llength [$self get-remaining-tiles]]} {
	    puts "-remaining-tiles $options(-remaining-tiles) !=  llength get-remaining-tiles [llength [$self get-remaining-tiles]]"
	}
	set options(-remaining-moves) [$self count-moves]
    }
    
    ##
    ## unplay to avoid deadlock
    ##
    method is-an-unplayed-move {slot1 slot2 moves} {
	set i1 [lsearch $moves $slot1]
	set i2 [lsearch $moves $slot2]
	if {$i1 < 0 || $i2 < 0} { error "what?" }
	if {abs($i1-$i2) == 2} {
	    if {$i1 < $i2 && ($i1%4) == 1} { return 1 }
	    if {$i2 < $i1 && ($i2%4) == 1} { return 1 }
	}
	return 0
    }
    proc slot-distance {slot1 slot2} {
	return [tcl::mathop::+ {*}[lmap a $slot1 b $slot2 {expr {pow($a-$b,2)}}]]
    }
    proc move-distance {slot1 slot2 slot3} {
	return [expr {[slot-distance $slot1 $slot2]+[slot-distance $slot1 $slot3]}]
    }
    method undo-unplayed-move {slot1 slot2 moves slots names} {
	# get the slot indexes
	set i1 [lsearch $moves $slot1]
	set i2 [lsearch $moves $slot2]
	# swap the slots so $i1 < $i2
	if {$i2 < $i1} {
	    foreach {slot1 slot2 i1 i2} [list $slot2 $slot1 $i2 $i1] break
	}
	# get the tiles played in the slots
	set name1 [$self get-slot-name $slot1]
	set name2 [$self get-slot-name $slot2]
	# get the indexes where the move is played
	set j1 [lsearch $moves $name1]
	set j2 [lsearch $moves $name2]
	# test our understanding
	if {$i1 != $j1+1 || $j2 != $i1+1 || $i2 != $j2+1 || ($j1%4) != 0} {
	    error "misunderstood the structure of moves"
	}
	# remove the slots and names from play
	$self tile-unplace $slot1 $name1
	$self tile-unplace $slot2 $name2
	#$self set-slot-name $slot1 {}
	#$self set-slot-name $slot2 {}
	#$self set-name-slot $name1 {}
	#$self set-name-slot $name2 {}
	# remove the move from $moves
	set moves [lreplace $moves $j1 $j1+3]
	# return the slots to $slots
	lappend slots $slot1 $slot2
	# return the tiles to $names
	lappend names $name1 $name2
	# return
	return [list $moves $slots $names]
    }

    ##
    ## game play/unplay mechanics
    ##
    method find-slots-in-play {} {
	return [lmap s [$self get-all-slots] {expr {[$self is-empty-slot $s]?[continue]:$s}}]
    }
    method find-moves {} {
	set moves {}
	set slots [$self find-slots-in-play]
	set slots [$self find-all-can-play $slots]
	for {set i 0} {$i < [llength $slots]} {incr i} {
	    set si [lindex $slots $i]
	    set ni [$self get-slot-name $si]
	    for {set j [expr {$i+1}]} {$j < [llength $slots]} {incr j} {
		set sj [lindex $slots $j]
		set nj [$self get-slot-name $sj]
		if {[$self match $ni $nj]} {
		    lappend moves [list $si $sj]
		}
	    }
	}
	return $moves
    }
    
    proc slot-histogram {slots} {
	set stats [dict create -1 [llength $slots] 0 0 1 0 2 0 3 0 4 0 5 0 6 0]
	foreach slot $slots { dict incr stats [lindex $slot 2] }
	return $stats
    }
    method stats-for-slots {slots} {
	set hist [slot-histogram $slots]
	set full [slot-histogram [$self get-all-slots]]
	set quot {}
	foreach n [dict keys $hist] { lappend quot "[dict get $hist $n]/[dict get $full $n]" }
	return $quot
    }
    method trace-puts {str} {
	if {$options(-trace)} {
	    if { ! [dict exists $data fp]} {
		dict set data fp [open "trace.data" w]
	    }
	    puts [dict get $data fp] $str
	    flush [dict get $data fp]
	}
    }
    method find-can-unplay {slots {donotblock {}}} {
	if {0} {
	    set veryfirst {}
	    foreach slot [$self find-all-can-unplay $slots $donotblock] {
		if {[$self is-naked-endcap $slot]} { 
		    if {$veryfirst eq {}} { set veryfirst $slot }
		} else {
		    return $slot
		}
	    }
	    if {$veryfirst ne {}} { return $veryfirst }
	} else {
	    foreach slot $slots {
		if {[$self can-unplay $slot $donotblock]} {
		    return $slot
		}
	    }
	}
	$self trace-puts "cannot unplay donotblock={$donotblock}: all={[$self find-all-can-unplay $slots]} [$self stats-for-slots $slots]"
	$self trace-puts "  slots={$slots}"
	$self trace-puts "  moves={[uplevel {set moves}]}"
	if {0} {
	    foreach slot {{1.0 1.0 1} {2.0 1.0 1} {3.0 1.0 1}} {
		$self trace-puts "  can-unplay $slot [$self can-unplay $slot]"
		$self trace-puts "  covers-empty-in-z $slot [$layout covers-empty-in-z $slot]"
		$self trace-puts "  is-empty $slot [$layout is-empty $slot]"
		$self trace-puts "  covers-empty-in-x $slot [$layout covers-empty-in-x $slot]"
		$self trace-puts "  row-closure $slot [$layout row-closure $slot]"
	    }
	}
	return {}
	error "cannot unplay"
    }
    method find-all-can-unplay {slots {donotblock {}}} {
	return [lmap slot $slots {
	    expr {[$self can-unplay $slot $donotblock] ? $slot : [continue]}
	}]
    }
    method find-can-play {slots} {
	foreach slot $slots {
	    if {[$self can-play $slot]} { return $slot }
	}
	error "cannot play"
    }
    method find-all-can-play {slots} {
	return [lmap slot $slots {
	    expr {[$self can-play $slot] ? $slot : [continue]}
	}]
    }
    ##
    ##
    ##
    method draw {slot name} {
	foreach {x y} [$self xy-for-slot $slot] break
	if {[$win find withtag $name] eq {}} {
	    set scale [expr {[$self cget -width]/64.0}]
	    $tiles draw $win $name 0 0 1
	    $win scale $name 0 0 $scale $scale
	    foreach id [$win find withtag $name] {
		if {[lsearch [$win itemcget $id -tags] scale-width] >= 0} {
		    $win itemconfigure $id -width [expr {$scale*[$win itemcget $id -width]}]
		}
	    }
	    $win move $name $x $y
	    $win move $name {*}$options(-offsets)
	} else {
	    foreach {ox oy} [dict get $data coords $name] break
	    $win move $name [expr {$x-$ox}] [expr {$y-$oy}]
	}
	dict set data coords $name [list $x $y]
	# $self check-tile-coords $slot $name
    }

    method show {slot name tag} {
	foreach id [$win find withtag $name] {
	    set tags [$win itemcget $id -tags]
	    switch $tag {
		plain -
		selected {
		    if {[lsearch $tags $tag] >= 0 || [lsearch $tags face] >= 0} {
			$win itemconfigure $id -state normal
		    } else {
			$win itemconfigure $id -state hidden
		    }
		}
		blank {
		    if {[lsearch $tags plain] >= 0} {
			$win itemconfigure $id -state normal
		    } else {
			$win itemconfigure $id -state hidden
		    }
		}
	    }
	}
    }
    method hide {slot name} {
 	$win itemconfigure $name -state hidden
    }
    ##
    ##
    ##
    method move-place {name1 slot1 name2 slot2} {
	$self tile-place $slot1 $name1
	$self tile-place $slot2 $name2
    }
    method move-unplace {name1 slot1 name2 slot2} {
	$self tile-unplace $slot1 $name1
	$self tile-unplace $slot2 $name2
    }
    method tile-place {slot name} {
	#$self trace-puts "$self tile-place $slot $name $draw"
	$self set-slot-name $slot $name
	$self set-name-slot $name $slot
	$self draw $slot $name
	$self show $slot $name plain
	$win bind $name <Enter> [list {*}[mymethod enter] $slot $name]
	$win bind $name <Leave> [list {*}[mymethod leave] $slot $name]
	$self raise-in-render-order
	incr options(-remaining-tiles) 1
    }
    
    method tile-unplace {slot name} {
 	$self set-name-slot $name {}
	$self set-slot-name $slot {}
	$self hide $slot $name
	$win bind $name <Enter> {}
	$win bind $name <Leave> {}
	incr options(-remaining-tiles) -1
    }
    method tile-is-placed {slot name} {
	return [expr {[$self get-slot-name $slot] eq $name}]
    }
    ##
    ## tile mouse event handlers
    ## mostly concerned with selected tile management
    ## set-selected {slot name}
    ##
    method get-selected {} { return [dict get $data selected] }
    method is-selected {} { return [expr {[$self get-selected] ne {}}] }
    method clear-selected {} {
	if {[$self is-selected]} { $self show {*}[$self get-selected] plain }
	dict set data selected {}
    }
    method set-selected {args} { 
	$self clear-selected
	if {$args ne {}} { $self show {*}$args selected	}
	dict set data selected $args
    }
    
    method enter {slot name} { $win bind $name <Button-1> [list {*}[mymethod button] $slot $name] }
    method leave {slot name} { $win bind $name <Button-1> {} }
    
    method button {slot1 name1} {
	if {[dict get $data paused]} return
	# if the tile is playable
	if {[$self can-play $slot1]} {
	    # if there's an already selected tile
	    if {[$self is-selected]} {
		# get the selected tile and clear the selection
		foreach {slot2 name2} [$self get-selected] break
		$self clear-selected
		if {$name1 eq $name2} {
		    # if it's the same tile
		    # just return, we've cancelled the selection
		    # and undone the selected image
		} elseif {[$self match $name1 $name2]} {
		    # if it's a match to the previously selected tile
		    # start counting time
		    $self start-timer
		    # remove the tiles from play
		    $self move-unplace $name1 $slot1 $name2 $slot2
		    # keep history
		    $self history-add $name1 $slot1 $name2 $slot2
		    # keep score
		    $self update-score
		} else {
		    # select the new tile in place of the old one
		    $self set-selected $slot1 $name1
		}
	    } else {
		# just select the new tile
		$self set-selected $slot1 $name1
	    }
	    $self raise-in-render-order
	}
    }
}

#
# create the layout for the "difficult" map tiles, rows, blocks, layers
# each layer of z is drawn offset in x and y to make the tiles stack
# layout is 7 tiles tall in y, plus a bit for the z offset,
# and 11 tiles wide in x, add a tile for margins, so
# take minimum of (width / 12) and ((height / 8) / 1.375)
# (taking aspect h/w = 1.375)
# to decide how large to make the tiles
#
# furthermore, the tiles, rows, and blocks in each layer
# are laid out in render order, which wasn't true in the
# original xml file
#
set mymap {
    {
	layer z 0 parts {
	    {tile x 10 y 3}
	    
	    {block left 8.5 right 9.5 top 0.5 bottom 1.5}
	    {block left 8.0 right 9.0 top 2.5 bottom 3.5}
	    {block left 8.5 right 9.5 top 4.5 bottom 5.5}
	    
	    {row y 0 left 3 right 7}
	    {row y 1 left 2.5 right 7.5}
	    {block left 3.0 right 7.0 top 2.0 bottom 4.0}
	    {row y 5 left 2.5 right 7.5}
	    {row y 6 left 3 right 7}
	    
	    {block left 0.5 right 1.5 top 0.5 bottom 1.5}
	    {block left 1.0 right 2.0 top 2.5 bottom 3.5}
	    {block left 0.5 right 1.5 top 4.5 bottom 5.5}
	    
	    {tile x 0 y 3}
	}
    }
    {
	layer z 1 parts {
	    {tile x 6.5 y 0}
	    
	    {row left 7 right 9 y 1}
	    {block left 7.5 top 2 right 8.5 bottom 4}
	    {row left 7 right 9 y 5}
	    
	    {tile x 6.5 y 6}
	    
	    {row y 0.5 left 4.5 right 5.5}
	    {row y 1.5 left 4 right 6}
	    {block top 2.5 left 3.5 bottom 3.5 right 6.5}
	    {row y 4.5 left 4 right 6}
	    {row y 5.5 left 4.5 right 5.5}
	    
	    {tile x 3.5 y 0}
	    
	    {row left 1 right 3 y 1}
	    {block left 1.5 top 2 right 2.5 bottom 4}
	    {row left 1 right 3 y 5}
	    
	    {tile x 3.5 y 6}
	} 
    }
    {
	layer z 2 parts {
	    {row y 2 left 2.5 right 7.5}
	    {row y 3 left 2 right 8}
	    {row y 4 left 2.5 right 7.5}
	}
    }
    {
	layer z 3 parts {
	    {tile x 7.5 y 3}
	    {block left 3.5 right 6.5 top 2.5 bottom 3.5}
	    {tile x 2.5 y 3}
	}
    }
    {row z 4 left 4 right 6 y 3}
    {row z 5 left 4.5 right 5.5 y 3}
    {tile z 6 x 5 y 3}
}

set mysvg {<svg id="svg3455" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" height="176" width="2752" version="1.1" xmlns:cc="http://creativecommons.org/ns#" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 2752 176" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <metadata id="metadata4483">
    <rdf:RDF>
      <cc:Work rdf:about="">
	<dc:format>image/svg+xml</dc:format>
	<dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <defs id="defs3457">
    <!-- tiles -->
    <g id="plain-tile">
      <path id="path3460" d="m9 0c-0.53 0-1.04 0.21-1.41 0.59l-7 7c-0.38 0.37-0.59 0.88-0.59 1.41v77c0 1.1 0.9 2 2 2h53c0.53 0 1.04-0.21 1.41-0.59l7-7c0.38-0.37 0.59-0.88 0.59-1.41v-77c0-1.1-0.9-2-2-2h-53z" fill="#000000"/>
      <path id="path3462" d="m11.75 78.25l-9 9h52.25c0.33 0 0.65-0.13 0.88-0.37l7-7c0.23-0.23 0.37-1.3 0.37-1.63h-51.5z" fill="#9F9F9F"/>
      <path id="path3464" d="m8.12 1.12l-7 7c-0.24 0.23-0.37 0.55-0.37 0.88v76.25l2 2 7-7v-79.5c-0.33 0-1.4 0.13-1.63 0.37z" fill="#D7D7D7"/>
      <path id="path3466" d="m1.61 86.89l10.14-10.14v-0.5l-10.41 10.41c0.08 0.09 0.17 0.16 0.27 0.23z" fill="#BFBFBF"/>
      <path id="path3468" d="m1.93 87.07l9.82-9.82v-0.5l-10.14 10.14c0.1 0.07 0.21 0.13 0.32 0.18z" fill="#B7B7B7"/>
      <path id="path3470" d="m2.3 87.2l9.45-9.45v-0.5l-9.82 9.82c0.12 0.05 0.24 0.1 0.37 0.13z" fill="#AFAFAF"/>
      <path id="path3472" d="m11.75 77.75l-9.45 9.45c0.14 0.03 0.29 0.05 0.45 0.05l9-9v-0.5z" fill="#A7A7A7"/>
      <path id="path3474" d="m1.34 86.66l10.41-10.41h-0.5l-10.14 10.14c0.07 0.1 0.14 0.19 0.23 0.27z" fill="#C7C7C7"/>
      <path id="path3476" d="m1.11 86.39l10.14-10.14h-0.5l-9.82 9.82c0.05 0.11 0.11 0.22 0.18 0.32z" fill="#CDCDCD"/>
      <path id="path3478" d="m0.93 86.07l9.82-9.82h-0.5l-9.45 9.45c0.03 0.13 0.08 0.25 0.13 0.37z" fill="#D2D2D2"/>
      <path id="path3480" d="m10.25 76.25h-0.5l-9 9c0 0.15 0.02 0.3 0.05 0.45l9.45-9.45z" fill="#D7D7D7"/>
      <path id="path3482" d="m63.25 78.25v-75.5c0-1.1-0.9-2-2-2h-50.5c-1.1 0-2 0.9-2 2v75.5c0 1.1 0.9 2 2 2h50.5c1.1 0 2-0.9 2-2z" fill="#F6F6F6"/>
      <path id="path3484" d="m8.75 78.25v-75.5c0-1.1 0.9-2 2-2h-1c-1.1 0-2 0.9-2 2v75.5c0 1.1 0.9 2 2 2h1c-1.1 0-2-0.9-2-2z" fill="#fff"/>
    </g>
    <g id="selected-tile">
      <path id="path3487" d="m9 0c-0.53 0-1.04 0.21-1.41 0.59l-7 7c-0.38 0.37-0.59 0.88-0.59 1.41v77c0 1.1 0.9 2 2 2h53c0.53 0 1.04-0.21 1.41-0.59l7-7c0.38-0.37 0.59-0.88 0.59-1.41v-77c0-1.1-0.9-2-2-2h-53z" fill="#00f"/>
      <path id="path3489" d="m11.75 78.25l-9 9h52.25c0.33 0 0.65-0.13 0.88-0.37l7-7c0.23-0.23 0.37-1.3 0.37-1.63h-51.5z" fill="#8F8FFF"/>
      <path id="path3491" d="m8.12 1.12l-7 7c-0.24 0.23-0.37 0.55-0.37 0.88v76.25l2 2 7-7v-79.5c-0.33 0-1.4 0.13-1.63 0.37z" fill="#C7C7FF"/>
      <path id="path3493" d="m1.61 86.89l10.14-10.14v-0.5l-10.41 10.41c0.08 0.09 0.17 0.16 0.27 0.23z" fill="#AFAFFF"/>
      <path id="path3495" d="m1.93 87.07l9.82-9.82v-0.5l-10.14 10.14c0.1 0.07 0.21 0.13 0.32 0.18z" fill="#A7A7FF"/>
      <path id="path3497" d="m2.3 87.2l9.45-9.45v-0.5l-9.82 9.82c0.12 0.05 0.24 0.1 0.37 0.13z" fill="#9F9FFF"/>
      <path id="path3499" d="m11.75 77.75l-9.45 9.45c0.14 0.03 0.29 0.05 0.45 0.05l9-9v-0.5z" fill="#9797FF"/>
      <path id="path3501" d="m1.34 86.66l10.41-10.41h-0.5l-10.14 10.14c0.07 0.1 0.14 0.19 0.23 0.27z" fill="#B7B7FF"/>
      <path id="path3503" d="m1.11 86.39l10.14-10.14h-0.5l-9.82 9.82c0.05 0.11 0.11 0.22 0.18 0.32z" fill="#BDBDFF"/>
      <path id="path3505" d="m0.93 86.07l9.82-9.82h-0.5l-9.45 9.45c0.03 0.13 0.08 0.25 0.13 0.37z" fill="#C2C2FF"/>
      <path id="path3507" d="m10.25 76.25h-0.5l-9 9c0 0.15 0.02 0.3 0.05 0.45l9.45-9.45z" fill="#C7C7FF"/>
      <path id="path3509" d="m61.25 0.75h-51.5c-1.1 0-2 0.9-2 2v75.5c0 1.1 0.9 2 2 2h51.5c1.1 0 2-0.9 2-2v-75.5c0-1.1-0.9-2-2-2z" fill="#E3E3FF"/>
      <path id="path3511" stroke="#00f" stroke-width="3" d="m60 74.19c0 1.55-1.22 2.81-2.72 2.81h-43.56c-1.5 0-2.72-1.26-2.72-2.81v-67.38c0-1.55 1.22-2.81 2.72-2.81h43.56c1.5 0 2.72 1.26 2.72 2.81v67.38z" fill="#fff"/>
    </g>
    <!-- bamboos -->
    <path id="bamboo" fill="none" stroke-width="1.75" d="m 5.50,12.50 c  1.50,0.00 4.00,-0.50 4.00,1.00  0.00,1.50 -2.50,1.00 -4.00,1.00  -1.50,0.00 -4.00,0.50 -4.00,-1.00  0.00,-1.50 2.50,-1.00 4.00,-1.00 z  m 0.00,-11.00 c  1.50,0.00 4.00,-0.50 4.00,1.00  0.00,1.50 -2.50,1.00 -4.00,1.00  -1.50,0.00 -4.00,0.50 -4.00,-1.00  0.00,-1.50 2.50,-1.00 4.00,-1.00 z  m 0.00,22.00 c  1.50,0.00 4.00,-0.50 4.00,1.00  0.00,1.50 -2.50,1.00 -4.00,1.00  -1.50,0.00 -4.00,0.50 -4.00,-1.00  0.00,-1.50 2.50,-1.00 4.00,-1.00 z  m -2.00,-20.00 l 0.00,9.00 m 4.00,-9.00 l 0.00,9.00 m -4.00,2.00 l 0.00,9.00 m 4.00,-9.00 l 0.00,9.00"/>
    <path id="bamboo-rgt" fill="none" stroke-width="1.75" d="m 5.87,12.57 c  1.39,0.56 3.90,1.03 3.33,2.43  -0.56,1.39 -2.69,-0.01 -4.08,-0.57  -1.39,-0.56 -3.90,-1.03 -3.33,-2.43  0.56,-1.39 2.69,0.01 4.08,0.57 z  m 4.12,-10.20 c  1.39,0.56 3.90,1.03 3.33,2.43  -0.56,1.39 -2.69,-0.01 -4.08,-0.57  -1.39,-0.56 -3.90,-1.03 -3.33,-2.43  0.56,-1.39 2.69,0.01 4.08,0.57 z  m -8.24,20.40 c  1.39,0.56 3.90,1.03 3.33,2.43  -0.56,1.39 -2.69,-0.01 -4.08,-0.57  -1.39,-0.56 -3.90,-1.03 -3.33,-2.43  0.56,-1.39 2.69,0.01 4.08,0.57 z  m 5.64,-19.29 l -3.37,8.34 m 7.08,-6.85 l -3.37,8.34 m -4.46,0.36 l -3.37,8.34 m 7.08,-6.85 l -3.37,8.34"/>
    <path id="bamboo-lft" fill="none" stroke-width="1.75" d="m 5.13,12.57 c  1.39,-0.56 3.52,-1.96 4.08,-0.57  0.56,1.39 -1.94,1.86 -3.33,2.43  -1.39,0.56 -3.52,1.96 -4.08,0.57  -0.56,-1.39 1.94,-1.86 3.33,-2.43 z  m -4.12,-10.20 c  1.39,-0.56 3.52,-1.96 4.08,-0.57  0.56,1.39 -1.94,1.86 -3.33,2.43  -1.39,0.56 -3.52,1.96 -4.08,0.57  -0.56,-1.39 1.94,-1.86 3.33,-2.43 z  m 8.24,20.40 c  1.39,-0.56 3.52,-1.96 4.08,-0.57  0.56,1.39 -1.94,1.86 -3.33,2.43  -1.39,0.56 -3.52,1.96 -4.08,0.57  -0.56,-1.39 1.94,-1.86 3.33,-2.43 z  m -9.35,-17.79 l 3.37,8.34 m 0.34,-9.84 l 3.37,8.34 m -2.96,3.35 l 3.37,8.34 m 0.34,-9.84 l 3.37,8.34"/>
    <!-- coins -->
    <g id="coin" fill="none">
      <circle cx="9.0" cy="9.0" r="8.50" stroke-width="1.3"/>
      <circle cx="9.0" cy="9.0" r="7.20" stroke-width="1.2"/>
      <circle cx="9.0" cy="9.0" r="5.15" stroke-width="1.1"/>
      <circle cx="12.6" cy="9.0" r="3.6" stroke-width="1.0"/>
      <circle cx="9.0" cy="12.6" r="3.6" stroke-width="1.0"/>
      <circle cx="5.4" cy="9.0" r="3.6" stroke-width="1.0"/>
      <circle cx="9.0" cy="5.4" r="3.6" stroke-width="1.0"/>
    </g>
    <!-- characters -->
    <g id="ten-thousand" fill="#BA0000">
      <path id="path3431" d="m 41.6,72.0384 c -1.2925,-1.6198 -2.4244,-3.0449 -2.5153,-3.167 -0.1561,-0.2096 -0.1527,-0.2377 0.061,-0.506 l 0.2265,-0.284 1.8388,0.8983 c 1.0113,0.4941 2.1883,1.0221 2.6155,1.1733 0.7605,0.2693 0.7809,0.2711 0.9829,0.088 0.412,-0.3728 1.1899,-1.6656 1.3877,-2.3062 0.2793,-0.9041 0.2705,-1.8582 -0.022,-2.4389 -0.2676,-0.5306 -0.6449,-0.7431 -1.575,-0.8869 -0.7755,-0.1198 -3.5996,-0.3431 -3.6538,-0.2888 -0.021,0.021 0.5676,0.7674 1.308,1.6588 0.7403,0.8914 1.3261,1.6207 1.3017,1.6207 -0.024,0 -0.9763,-0.3584 -2.1154,-0.7965 -1.139,-0.4381 -2.1032,-0.7766 -2.1425,-0.7523 -0.039,0.024 -1.2481,0.4469 -2.6861,0.939 l -2.6145,0.8948 -0.1487,-0.2875 c -0.082,-0.1582 -0.1487,-0.3299 -0.1487,-0.3816 0,-0.052 0.765,-0.7392 1.7,-1.5276 0.935,-0.7884 1.7,-1.4614 1.7,-1.4955 0,-0.034 -1.3613,-0.092 -3.025,-0.1288 -1.6638,-0.037 -3.8304,-0.096 -4.8147,-0.1312 l -1.7897,-0.064 0.068,0.5908 c 0.037,0.3249 0.2154,1.7948 0.3957,3.2664 l 0.3279,2.6755 -0.3504,0.097 c -0.1927,0.053 -0.3688,0.078 -0.3913,0.056 -0.022,-0.023 -0.6176,-1.54 -1.3225,-3.3723 l -1.2815,-3.3313 -0.4831,-0.032 c -0.7553,-0.049 -2.6068,0.153 -3.4332,0.3752 -0.4125,0.1109 -0.8175,0.202 -0.9,0.2025 -0.1586,0 -1.0605,-1.569 -0.9594,-1.6701 0.032,-0.032 2.2404,-0.2455 4.9077,-0.4744 2.6673,-0.229 4.877,-0.4437 4.9104,-0.4771 0.033,-0.033 -0.033,-0.5926 -0.1473,-1.2427 -0.4706,-2.6738 -0.7386,-5.511 -0.5803,-6.1425 0.055,-0.22 0.1017,-0.2365 0.5748,-0.2041 0.4907,0.034 2.5941,-0.1399 3.0691,-0.2533 0.2177,-0.052 0.225,-0.03 0.225,0.6758 0,0.4012 -0.063,1.0023 -0.1399,1.3358 -0.077,0.3335 -0.2139,1.2364 -0.3043,2.0064 -0.203,1.7282 -0.1989,1.7019 -0.4411,2.7998 -0.1092,0.4948 -0.1909,0.9055 -0.1816,0.9125 0.014,0.011 4.0582,-0.3371 4.1439,-0.3563 0.015,-0 0.02,-1.5022 0.011,-3.331 -0.012,-2.5777 0.016,-3.4599 0.1269,-3.925 l 0.1428,-0.6 0.628,-0.085 c 0.3455,-0.046 0.6559,-0.057 0.6898,-0.023 0.034,0.034 0.05,1.8154 0.037,3.9589 l -0.025,3.8972 0.7813,-0.062 c 0.4296,-0.034 1.0512,-0.09 1.3812,-0.1243 l 0.6,-0.062 0.068,-0.45 c 0.037,-0.2475 0.071,-0.765 0.075,-1.15 0.01,-0.6684 0.1145,-1.2668 0.3036,-1.7 0.1229,-0.2814 0.1975,-0.8221 0.2983,-2.1631 0.05,-0.6669 0.1511,-1.2859 0.2365,-1.4511 0.082,-0.1585 0.1801,-0.5351 0.2181,-0.8369 0.038,-0.3019 0.076,-0.5567 0.085,-0.5663 0.032,-0.034 1.8191,-0.332 1.9953,-0.3323 0.1696,0 2.1696,1.8458 2.1696,2.0027 0,0.04 -0.1365,0.1293 -0.3034,0.1984 -0.6061,0.2511 -1.3577,1.3246 -2.4428,3.4892 -0.6667,1.3301 -1.2708,2.7257 -1.2073,2.7892 0.03,0.03 1.01,-0.022 2.1787,-0.1141 2.7218,-0.2151 3.4146,-0.2115 3.9248,0.021 0.5962,0.2714 1.6753,1.1788 3.8779,3.2608 l 1.978,1.8697 -0.2222,0.3666 c -2.5483,4.2055 -5.7626,7.69 -7.8357,8.4946 -1.0336,0.4011 -0.7316,0.6392 -3.348,-2.6397 z m -10.6598,-19.7074 c -0.1666,-0.2095 -0.3337,-0.4327 -0.3712,-0.4959 -0.042,-0.071 0.2081,-0.2873 0.6564,-0.567 3.8456,-2.3997 6.7832,-6.0572 6.1267,-7.6284 l -0.1451,-0.3473 -0.4285,0.2179 c -2.3749,1.2076 -4.3017,3.6983 -4.8122,6.2205 -0.1189,0.5873 -0.1402,0.6192 -0.4146,0.6192 l -0.2892,0 -1.0783,-4.3 c -0.5931,-2.365 -1.0797,-4.3278 -1.0813,-4.3618 -0,-0.034 0.7058,0.6509 1.5721,1.5219 l 1.575,1.5837 2.4,-1.8413 c 1.32,-1.0127 2.4587,-1.8438 2.5305,-1.8469 0.1611,-0.01 5.2195,3.5762 5.2195,3.6972 0,0.048 -0.063,0.1232 -0.1398,0.1672 -0.6376,0.3649 -4.1602,3.8503 -4.1602,4.1163 0,0.047 0.3487,0.1091 0.775,0.1384 1.0054,0.069 2.1722,0.4648 3.1529,1.0692 l 0.7779,0.4794 -1.8279,0.053 c -2.6758,0.078 -4.8196,0.49 -9.5813,1.842 -0.091,0.026 -0.2762,-0.1109 -0.4564,-0.3375 z"/>
      <path id="path3410" d="m 28.8519,60.7708 c -0.021,-0.066 -0.102,-0.5146 -0.1796,-0.9958 l -0.141,-0.875 0.3093,-0.015 c 0.1702,-0.01 0.4444,-0.027 0.6094,-0.042 0.165,-0.015 0.525,-0.045 0.8,-0.068 1.8965,-0.1589 4.1942,-0.3898 4.7,-0.4724 0.33,-0.054 0.8925,-0.1186 1.25,-0.1438 0.3575,-0.025 1.145,-0.1191 1.75,-0.2085 1.3891,-0.2053 4.3508,-0.4298 4.4099,-0.3342 0.024,0.04 -0.1432,0.4506 -0.3726,0.9133 l -0.4172,0.8411 -1.3509,0.065 c -0.7429,0.036 -1.9084,0.065 -2.59,0.065 -0.8908,0 -1.3185,0.041 -1.5215,0.146 -0.1553,0.08 -0.301,0.1274 -0.3238,0.1046 -0.06,-0.06 -2.148,0.2224 -3.4339,0.4642 -0.605,0.1137 -1.3386,0.2434 -1.6302,0.2881 -0.2916,0.045 -0.5841,0.1236 -0.65,0.1754 -0.2004,0.1575 -1.1735,0.2315 -1.2179,0.093 z m -0.5868,-4.1877 c -0.075,-0.2801 -0.086,-2.1113 -0.014,-2.2999 0.037,-0.096 0.2169,-0.1238 0.6395,-0.1 1.0183,0.058 5.4962,-0.5228 11.15,-1.4454 2.2777,-0.3717 2.8311,-0.4335 3.0119,-0.3367 0.3001,0.1605 2.0017,1.878 1.9309,1.9488 -0.1459,0.1459 -1.8236,0.7899 -2.5832,0.9916 -1.0267,0.2726 -1.9781,0.4063 -4.35,0.6115 -0.99,0.086 -1.9738,0.2018 -2.1863,0.2581 -0.2124,0.056 -0.5499,0.078 -0.75,0.048 -0.2,-0.03 -1.0162,0.012 -1.8137,0.092 -1.4414,0.1458 -2.5114,0.2256 -3.85,0.287 -0.385,0.018 -0.7951,0.065 -0.9112,0.1048 -0.168,0.058 -0.224,0.025 -0.2737,-0.1603 z"/>
    </g>
    <!-- flowers -->
    <g id="flower">
      <!-- background rectangle -->
      <rect id="rect3531" height="67" width="43" y="1" x="1" fill="#F8F6D8"/>
      <path id="path3533" d="m11.27 58.16l-0.71-8.35c1.76-0.67 2.92-1.76 2.83-2.86s-1.42-1.91-3.26-2.16l-0.71-8.36c1.76-0.67 2.92-1.76 2.83-2.86-0.13-1.56-2.69-2.54-5.71-2.19s-5.37 1.89-5.23 3.44c0.09 1.1 1.42 1.91 3.25 2.16l0.71 8.36c-1.76 0.67-2.92 1.76-2.83 2.86s1.42 1.91 3.25 2.16l0.71 8.36c-1.76 0.67-2.92 1.76-2.83 2.86 0.13 1.55 2.69 2.53 5.71 2.19 3.02-0.35 5.37-1.89 5.23-3.44-0.08-1.11-1.4-1.92-3.24-2.17zm-6.93-23.69c-0.05-0.58 1-1.18 2.34-1.34 1.34-0.15 2.47 0.2 2.52 0.78 0.04 0.49-0.7 0.99-1.74 1.23l0.61 7.13c0.05 0.56-0.19 1.04-0.52 1.08-0.34 0.04-0.65-0.38-0.7-0.94l-0.61-7.13c-1.05 0-1.86-0.32-1.9-0.81zm0.23 13.48c-0.05-0.58 1.41-1.23 3.25-1.44 1.85-0.21 3.39 0.09 3.43 0.67 0.05 0.58-1.41 1.23-3.25 1.44-1.85 0.22-3.38-0.08-3.43-0.67zm4.58 14.05c-1.34 0.15-2.47-0.19-2.52-0.78-0.04-0.49 0.7-0.99 1.74-1.23l-0.61-7.13c-0.05-0.56 0.19-1.04 0.52-1.08s0.65 0.38 0.69 0.94l0.61 7.13c1.06 0 1.87 0.32 1.91 0.81 0.05 0.59-1 1.19-2.34 1.34z" fill="#D3BB54"/>
      <path id="path3535" stroke="#7C5A2D" stroke-width=".25" d="m11.27 58.16l-0.71-8.35c1.76-0.67 2.92-1.76 2.83-2.86s-1.42-1.91-3.26-2.16l-0.71-8.36c1.76-0.67 2.92-1.76 2.83-2.86-0.13-1.56-2.69-2.54-5.71-2.19s-5.37 1.89-5.23 3.44c0.09 1.1 1.42 1.91 3.25 2.16l0.71 8.36c-1.76 0.67-2.92 1.76-2.83 2.86s1.42 1.91 3.25 2.16l0.71 8.36c-1.76 0.67-2.92 1.76-2.83 2.86 0.13 1.55 2.69 2.53 5.71 2.19 3.02-0.35 5.37-1.89 5.23-3.44-0.08-1.11-1.4-1.92-3.24-2.17zm-6.93-23.69c-0.05-0.58 1-1.18 2.34-1.34 1.34-0.15 2.47 0.2 2.52 0.78 0.04 0.49-0.7 0.99-1.74 1.23l0.61 7.13c0.05 0.56-0.19 1.04-0.52 1.08-0.34 0.04-0.65-0.38-0.7-0.94l-0.61-7.13c-1.05 0-1.86-0.32-1.9-0.81zm0.23 13.48c-0.05-0.58 1.41-1.23 3.25-1.44 1.85-0.21 3.39 0.09 3.43 0.67 0.05 0.58-1.41 1.23-3.25 1.44-1.85 0.22-3.38-0.08-3.43-0.67zm4.58 14.05c-1.34 0.15-2.47-0.19-2.52-0.78-0.04-0.49 0.7-0.99 1.74-1.23l-0.61-7.13c-0.05-0.56 0.19-1.04 0.52-1.08s0.65 0.38 0.69 0.94l0.61 7.13c1.06 0 1.87 0.32 1.91 0.81 0.05 0.59-1 1.19-2.34 1.34z" fill="none"/>
      <path id="path3537" stroke="#7C5A2D" stroke-width=".25" d="m5.23 67.99c2.49-8.18-3.33-18.78-3.33-18.78s10.4 10.59 7.48 18.78h-4.15z" fill="#EADDA7"/>
      <path id="path3539" d="m19.02 36.17c-2.92-0.98-5.59-0.56-5.97 0.94-0.27 1.06 0.7 2.38 2.33 3.41l-2.03 8.06c-1.85-0.14-3.28 0.37-3.54 1.43-0.27 1.06 0.7 2.38 2.33 3.41l-2.03 8.06c-1.84-0.14-3.27 0.37-3.54 1.43-0.38 1.5 1.68 3.51 4.6 4.5 2.92 0.98 5.59 0.56 5.96-0.94 0.27-1.06-0.7-2.38-2.32-3.41l2.03-8.06c1.85 0.14 3.28-0.37 3.55-1.43s-0.71-2.38-2.33-3.41l2.03-8.06c1.84 0.14 3.28-0.37 3.54-1.43 0.36-1.51-1.69-3.52-4.61-4.5zm-4.61 20.87l-1.73 6.88c0.98 0.45 1.63 1.1 1.51 1.58-0.14 0.56-1.31 0.66-2.6 0.23-1.3-0.44-2.23-1.25-2.09-1.81 0.12-0.47 0.97-0.62 2.01-0.39l1.73-6.88c0.13-0.54 0.51-0.88 0.83-0.77 0.32 0.1 0.47 0.62 0.34 1.16zm3.91-4.16c-0.14 0.56-1.7 0.53-3.48-0.07s-3.11-1.54-2.97-2.11c0.14-0.56 1.7-0.53 3.48 0.07s3.11 1.55 2.97 2.11zm2.36-13.21c-0.12 0.47-0.97 0.62-2.01 0.39l-1.73 6.88c-0.13 0.54-0.51 0.88-0.83 0.77s-0.48-0.63-0.34-1.17l1.73-6.88c-0.98-0.45-1.63-1.1-1.51-1.58 0.14-0.56 1.31-0.67 2.6-0.23 1.3 0.45 2.23 1.26 2.09 1.82z" fill="#DBC879"/>
      <path id="path3541" stroke="#7C5A2D" stroke-width=".25" d="m19.02 36.17c-2.92-0.98-5.59-0.56-5.97 0.94-0.27 1.06 0.7 2.38 2.33 3.41l-2.03 8.06c-1.85-0.14-3.28 0.37-3.54 1.43-0.27 1.06 0.7 2.38 2.33 3.41l-2.03 8.06c-1.84-0.14-3.27 0.37-3.54 1.43-0.38 1.5 1.68 3.51 4.6 4.5 2.92 0.98 5.59 0.56 5.96-0.94 0.27-1.06-0.7-2.38-2.32-3.41l2.03-8.06c1.85 0.14 3.28-0.37 3.55-1.43s-0.71-2.38-2.33-3.41l2.03-8.06c1.84 0.14 3.28-0.37 3.54-1.43 0.36-1.51-1.69-3.52-4.61-4.5zm-4.61 20.87l-1.73 6.88c0.98 0.45 1.63 1.1 1.51 1.58-0.14 0.56-1.31 0.66-2.6 0.23-1.3-0.44-2.23-1.25-2.09-1.81 0.12-0.47 0.97-0.62 2.01-0.39l1.73-6.88c0.13-0.54 0.51-0.88 0.83-0.77 0.32 0.1 0.47 0.62 0.34 1.16zm3.91-4.16c-0.14 0.56-1.7 0.53-3.48-0.07s-3.11-1.54-2.97-2.11c0.14-0.56 1.7-0.53 3.48 0.07s3.11 1.55 2.97 2.11zm2.36-13.21c-0.12 0.47-0.97 0.62-2.01 0.39l-1.73 6.88c-0.13 0.54-0.51 0.88-0.83 0.77s-0.48-0.63-0.34-1.17l1.73-6.88c-0.98-0.45-1.63-1.1-1.51-1.58 0.14-0.56 1.31-0.67 2.6-0.23 1.3 0.45 2.23 1.26 2.09 1.82z" fill="none"/>
      <path id="path3543" stroke="#7C5A2D" stroke-width=".25" d="m19.85 67.7c-1.77-5.79 2.35-13.28 2.35-13.28s-7.35 7.49-5.29 13.28h2.94z" fill="#EADA9B"/>
      <path id="path3545" stroke="#7C5A2D" d="m30.33 52.2c-10.89 0-12.13-1.84-15.85-5.97 4.7-3.44 10.9-3.9 16.34 4.82l-0.49 1.15z" fill="#BFAA52"/>
      <path id="path3547" d="m27.52 50.68c-6.89 0-7.68-1.16-10.03-3.78 2.98-2.18 6.9-2.47 10.34 3.05l-0.31 0.73z" fill="#DBC775"/>
      <path id="path3549" stroke="#7C5A2D" d="m42.27 47.51c-0.36 2.52-6.85 4.67-9.62 5.14s1.52-5.63 6.18-9.5c2.95-0.51 3.67 2.79 3.44 4.36z" fill="#BFAA52"/>
      <path id="path3551" d="m37.59 49.31c-0.15 1.08-2.95 2.01-4.14 2.21s0.66-2.42 2.66-4.09c1.27-0.22 1.58 1.2 1.48 1.88z" fill="#DBC775"/>
      <path id="path3553" stroke="#7C5A2D" stroke-width=".75" d="m38.25 67.92c-7.82-3.7-5.44-11.92-5.44-18.72l-2.23-0.29s-2.8 17.48 4.83 18.76l2.84 0.25z" fill="#E5D389"/>
      <path id="path3555" stroke="#7C5A2D" d="m43.33 52.91v7.75s-2.47 2.07-4.21 2.07c-1.73 0-6.93-9.55-6.44-10.59 0.51-1.04 10.16-1.29 10.65 0.77z" fill="#BFAA52"/>
      <path id="path3557" d="m40.06 53.5c1.02 0.72 0 3.43 0 3.43s-1.33 0.91-2.27 0.91c-0.93 0-3.73-4.22-3.47-4.68s4.72-0.37 5.74 0.34z" fill="#DBC775"/>
      <path id="path3559" stroke="#7C5A2D" d="m31.45 52.39c-12.87-1.29-10.89 4.39-14.11 10.07 10.15 2.84 10.89-5.42 14.11-10.07z" fill="#BFAA52"/>
      <path id="path3561" d="m30.26 53.1c-8.21-0.82-6.95 2.8-9 6.42 6.48 1.82 6.95-3.45 9-6.42z" fill="#E2CF7F"/>
      <path id="path3563" stroke="#7C5A2D" d="m32.93 50.42s3.69-9.06-0.25-11.11c-4.04-2.11-6.64-1.29-7.13 0-0.5 1.29 3.91 12.41 5.65 12.66 1.73 0.26 1.73-1.55 1.73-1.55z" fill="#BFAA52"/>
      <path id="path3565" d="m32.14 50.27s2.05-5.67-0.14-6.95c-2.24-1.32-3.68-0.81-3.96 0s2.17 7.76 3.13 7.92c0.97 0.16 0.97-0.97 0.97-0.97z" fill="#DBC775"/>
      <path id="path3567" stroke="#7C5A2D" stroke-width=".25" d="m31.45 51.12s-1.48-2.54-1.23-4.87" fill="#EADDA7"/>
      <path id="path3569" stroke="#7C5A2D" d="m30.33 52.6s-4.13 5.57-2.01 5.48c2.41-0.11 2.6 0 5.1 0.46 2.57 0.47 0.2-5.55-1.6-6.32l-1.49 0.38z" fill="#BFAA52"/>
      <path id="path3571" stroke="#7C5A2D" stroke-width=".5" d="m27.27 48.13s2.02 2.93 3.35 2.93 0.61 2.18 0 1.56c-0.62-0.63-2.47-2.43-3.57-2.62-0.82 0-1.01-2.34 0.22-1.87z" fill="#DBC879"/>
      <path id="path3573" stroke="#AF9A41" d="m44 12.51c-4.46 0-8.54 2.85-8.54 6.37s4.08 6.37 8.54 6.37v-12.74z" fill="#D3BB54"/>
      <path id="path3575" stroke="#AF9A41" d="m33.33 7.64c0-3.52-3.62-6.23-8.08-6.23s-8.08 2.71-8.08 6.23 3.62 6.37 8.08 6.37c4.46 0 8.08-2.85 8.08-6.37z" fill="#D3BB54"/>
      <ellipse id="ellipse3577" cy="17.54" rx="8.08" ry="6.37" stroke="#AF9A41" cx="29.56" fill="#D3BB54"/>
      <path id="path3579" stroke="#AF9A41" d="m44 16.35v-14.93h-13.1c-2.93 1.56-3.79 4.49-3.79 7.49 0 4.79 4.93 8.68 11.02 8.68 2.08-0.01 4.21-0.46 5.87-1.24z" fill="#DBC879"/>
      <path id="path3581" stroke="#AF9A41" d="m31.94 15.47s-0.72 1.82-3.03 1.82" fill="#D3BB54"/>
      <path id="path3583" stroke="#AF9A41" d="m27.19 6.62s-1.73 0.57-3.17-1.02" fill="#D3BB54"/>
      <path id="path3587" d="m31.13 52.9s-1.71 2.31-0.83 2.27c1-0.04 1.08 0 2.11 0.19 1.06 0.2 0.08-2.3-0.66-2.62l-0.62 0.16z" fill="#E2CF7F"/>
      <rect id="rect3585" stroke="#633" stroke-width="2" height="65" width="41" y="2" x="2" fill="none"/>
    </g>
    <!-- seasons -->
    <g id="season">
      <!-- background rectangle and frame -->
      <rect id="rect3590" height="67" width="43" y="1" x="1" fill="#E3E4FF" stroke="#678ED3" stroke-width="1"/>
      <!-- snowflake -->
      <polygon id="polygon3592" stroke="#99B9FF" points="4.69 42.38 9.02 39.76 10.2 44.33 6.26 48.26 8.62 49.89 10.2 48.26 10.98 51.52 14.91 51.19 14.52 47.93 17.27 49.24 18.85 47.28 14.13 44.01 13.34 39.44 19.24 41.4 20.81 45.97 23.56 44.99 22.77 42.7 26.71 44.33 28.28 41.07 23.96 39.44 27.11 38.45 25.92 36.17 20.42 37.8 14.91 35.84 20.03 32.9 25.92 33.88 26.31 31.27 23.17 30.94 26.31 28.98 23.96 26.37 20.81 28 20.81 26.04 18.06 25.71 17.27 30.61 12.55 33.23 11.77 28.66 15.7 24.41 12.95 23.1 11.38 25.06 10.58 21.47 7.05 22.12 7.45 25.39 4.69 24.08 3.12 25.71 7.45 28.66 8.23 33.55 3.12 31.92 1 27.81 1 34.92 1.16 34.86 6.26 36.82 1.55 39.76 1 39.66 1 45.06 1.16 44.99 1 45.91 1 47.31 3.51 47.6" fill="#CAE0FF"/>
      <!-- sun core circle -->
      <path id="path3594" stroke="#678ED3" d="m40.63 26.67c1.1 0 2.17-0.13 3.21-0.35v-24.82h-14.3c-2.44 2.67-3.95 6.22-3.95 10.13 0 8.31 6.73 15.04 15.04 15.04z" fill="#99B9FF"/>
      <!-- small triangles -->
      <polygon id="polygon3596" fill="#C9D3F2" stroke="#9EB3E8" stroke-width=".5" points="22.61 14.9 22.3 14.59 20.96 16.9 23.27 18.23 23.39 17.81"/>
      <polygon id="polygon3598" fill="#C9D3F2" stroke="#9EB3E8" stroke-width=".5" points="34.45 28.87 34.03 28.98 35.36 31.29 37.67 29.96 37.35 29.65"/>
      <polygon id="polygon3602" fill="#C9D3F2" stroke="#9EB3E8" stroke-width=".5" points="23.39 5.45 23.27 5.03 20.96 6.36 22.3 8.67 22.61 8.36"/>
      <polygon id="polygon3606" fill="#C9D3F2" stroke="#9EB3E8" stroke-width=".5" points="26.66 23.47 26.23 23.36 26.23 26.02 28.9 26.02 28.78 25.6"/>
      <polygon id="polygon3600" fill="#798CD8" points="43.83 30.1 43.83 29.71 43.59 29.96"/>
      <!-- large triangles -->
      <polygon id="polygon3604" fill="#99B9FF" stroke="#678ED3" points="23.31 15.6 23.31 7.66 22.61 8.36 22.3 8.67 19.34 11.63 22.3 14.59 22.61 14.9"/>
      <polygon id="polygon3608" fill="#99B9FF" stroke="#678ED3" points="37.35 29.65 37.67 29.96 40.63 32.92 43.59 29.96 43.83 29.71 43.83 28.95 36.66 28.95"/>
      <polygon id="polygon3610" fill="#99B9FF" stroke="#678ED3" points="35.41 28.61 28.53 24.64 28.78 25.6 28.9 26.02 29.98 30.07 34.03 28.98 34.45 28.87"/>
      <polygon id="polygon3612" fill="#99B9FF" stroke="#678ED3" points="27.61 23.73 23.64 16.85 23.39 17.81 23.27 18.23 22.19 22.27 26.23 23.36 26.66 23.47"/>
      <polygon id="polygon3614" fill="#99B9FF" stroke="#678ED3" points="23.39 5.45 23.64 6.41 26.48 1.5 22.33 1.5 23.27 5.03"/>
      <!-- cloud -->
      <path id="path3616" fill="#99B9FF" stroke="#678ED3" d="m30.67 46.67s2.32-3 7-3c5.67 0 5.67 9.33 5.67 9.33h-23.67s-0.33-6.67 7.67-6.67c3.67 0 6 4 6 4"/>
      <!-- raindrops -->
      <path id="path3618" stroke="#678ED3" fill="#99B9FF"
	    d="M29.5,57.27L24.83,65.36 M34.22,55.68L28.68,65.95 M23.33,61L20.5,65.91 M37.46,54.63L33.25,62.59 M40.46,62.17L38.13,66.21
	       M27.11,54.52L24.44,59.14 M31.67,54L30.67,55.73 M40.98,55.6L37.81,61.09 M23.84,55.04L22.18,57.92 M21.13,55.63L16.91,63.59
	       M36,63.6L35,65.33"/>
      <!-- frame -->
      <rect id="rect3640" fill="none" stroke="#678ED3" stroke-width="1" height="65" width="41" y="2" x="2"/>
    </g>
    <!-- coins -->
    <g id="one-coin">
      <path id="path4320" stroke="#10106C" stroke-width=".75" d="m49.4 40.5c0 7.7-6.2 13.9-13.9 13.9s-13.9-6.2-13.9-13.9 6.2-13.9 13.9-13.9 13.9 6.2 13.9 13.9z" fill="none"/>
      <circle id="circle4322" r="6.5" cy="40.5" stroke="#10106C" cx="42" stroke-width="1.6" fill="none"/>
      <circle id="circle4324" r="6.5" cy="40.5" stroke="#10106C" cx="29" stroke-width="1.6" fill="none"/>
      <circle id="circle4326" r="6.5" cy="34" stroke="#10106C" cx="35.5" stroke-width="1.6" fill="none"/>
      <circle id="circle4328" r="6.5" cy="47" stroke="#10106C" cx="35.5" stroke-width="1.6" fill="none"/>
      <path id="path4330" stroke="#10106C" stroke-width=".75" d="m44.8 40.5c0 5.1-4.2 9.3-9.3 9.3s-9.3-4.2-9.3-9.3c0-5.1 4.2-9.3 9.3-9.3s9.3 4.2 9.3 9.3z" fill="none"/>
      <path id="path4332" stroke="#BA0000" stroke-width="2" d="m52.2 40.5c0 9.2-7.5 16.7-16.7 16.7s-16.7-7.5-16.7-16.7 7.5-16.7 16.7-16.7 16.7 7.5 16.7 16.7z" fill="none"/>
      <path id="path4334" stroke="#10106C" stroke-width=".75" d="m55 40.5c0 10.8-8.7 19.5-19.5 19.5s-19.5-8.7-19.5-19.5 8.7-19.5 19.5-19.5 19.5 8.7 19.5 19.5z" fill="none"/>
    </g>
    <g id="two-coins">
      <use id="use3882" xlink:href="#coin" stroke="#10106C" transform="translate(24.5 16.5) scale(1.22)"/>
      <use id="use3884" xlink:href="#coin" stroke="#10106C" transform="translate(24.5 42.5) scale(1.22)"/>
    </g>
    <g id="three-coins">
      <use id="use3890" xlink:href="#coin" stroke="#10106C"  transform="translate(16.5 12.5)"/>
      <use id="use3894" xlink:href="#coin" stroke="#9C0000" transform="translate(26.5 31.5)"/>
      <use id="use3898" xlink:href="#coin" stroke="#10106C"  transform="translate(36.5 50.5)"/>
    </g>
    <g id="four-coins">
      <use id="use3902" xlink:href="#coin" stroke="#10106C" transform="translate(17 15) scale(.94)"/>
      <use id="use3904" xlink:href="#coin" stroke="#10106C" transform="translate(17 49) scale(.94)"/>
      <use id="use3910" xlink:href="#coin" stroke="#10106C" transform="translate(37 15) scale(.94)"/>
      <use id="use3912" xlink:href="#coin" stroke="#10106C" transform="translate(37 49) scale(.94)"/>
    </g>
    <g id="five-coins">
      <use id="use3918" xlink:href="#coin" stroke="#10106C"  transform="translate(17.5 13.5) scale(.88)"/>
      <use id="use3920" xlink:href="#coin" stroke="#10106C"  transform="translate(17.5 51.5) scale(.88)"/>
      <use id="use3926" xlink:href="#coin" stroke="#9C0000" transform="translate(27.5 32.5) scale(.88)"/>
      <use id="use3930" xlink:href="#coin" stroke="#10106C"  transform="translate(37.5 13.5) scale(.88)"/>
      <use id="use3932" xlink:href="#coin" stroke="#10106C"  transform="translate(37.5 51.5) scale(.88)"/>
    </g>
    <g id="six-coins">
      <use id="use3938" xlink:href="#coin" stroke="#10106C" transform="translate(20 14) scale(.72)"/>
      <use id="use3940" xlink:href="#coin" stroke="#9C0000" transform="translate(20 37) scale(.72)"/>
      <use id="use3942" xlink:href="#coin" stroke="#9C0000" transform="translate(20 54) scale(.72)"/>
      <use id="use3950" xlink:href="#coin" stroke="#10106C" transform="translate(38 14) scale(.72)"/>
      <use id="use3952" xlink:href="#coin" stroke="#9C0000" transform="translate(38 37) scale(.72)"/>
      <use id="use3954" xlink:href="#coin" stroke="#9C0000" transform="translate(38 54) scale(.72)"/>
    </g>
    <g id="seven-coins">
      <use id="use3962" xlink:href="#coin" stroke="#10106C" transform="translate(15 10) scale(.72)"/>
      <use id="use3964" xlink:href="#coin" stroke="#9C0000" transform="translate(20 41) scale(.72)"/>
      <use id="use3966" xlink:href="#coin" stroke="#9C0000" transform="translate(20 58) scale(.72)"/>
      <use id="use3968" xlink:href="#coin" stroke="#10106C" transform="translate(29 17) scale(.72)"/>
      <use id="use3970" xlink:href="#coin" stroke="#10106C" transform="translate(43 24) scale(.72)"/>
      <use id="use3978" xlink:href="#coin" stroke="#9C0000" transform="translate(38 41) scale(.72)"/>
      <use id="use3980" xlink:href="#coin" stroke="#9C0000" transform="translate(38 58) scale(.72)"/>
    </g>
    <g id="eight-coins">
      <use id="use3990" xlink:href="#coin" stroke="#10106C" transform="translate(21 10) scale(.72)"/>
      <use id="use3992" xlink:href="#coin" stroke="#10106C" transform="translate(21 26) scale(.72)"/>
      <use id="use3994" xlink:href="#coin" stroke="#10106C" transform="translate(21 42) scale(.72)"/>
      <use id="use3996" xlink:href="#coin" stroke="#10106C" transform="translate(21 58) scale(.72)"/>
      <use id="use4006" xlink:href="#coin" stroke="#10106C" transform="translate(37 10) scale(.72)"/>
      <use id="use4008" xlink:href="#coin" stroke="#10106C" transform="translate(37 26) scale(.72)"/>
      <use id="use4010" xlink:href="#coin" stroke="#10106C" transform="translate(37 42) scale(.72)"/>
      <use id="use4012" xlink:href="#coin" stroke="#10106C" transform="translate(37 58) scale(.72)"/>
    </g>
    <g id="nine-coins">
      <use id="use4022" xlink:href="#coin" stroke="#10106C" transform="translate(14 14) scale(.72)"/>
      <use id="use4024" xlink:href="#coin" stroke="#9C0000" transform="translate(14 34) scale(.72)"/>
      <use id="use4026" xlink:href="#coin" stroke="#10106C" transform="translate(14 54) scale(.72)"/>
      <use id="use4034" xlink:href="#coin" stroke="#10106C" transform="translate(29 14) scale(.72)"/>
      <use id="use4036" xlink:href="#coin" stroke="#9C0000" transform="translate(29 34) scale(.72)"/>
      <use id="use4038" xlink:href="#coin" stroke="#10106C" transform="translate(29 54) scale(.72)"/>
      <use id="use4046" xlink:href="#coin" stroke="#10106C" transform="translate(44 14) scale(.72)"/>
      <use id="use4048" xlink:href="#coin" stroke="#9C0000" transform="translate(44 34) scale(.72)"/>
      <use id="use4050" xlink:href="#coin" stroke="#10106C" transform="translate(44 54) scale(.72)"/>
    </g>
    <!-- winds -->
    <path id="north-wind" d="m56.3 54.7c-2-0.9-11.8 3.3-11.8 3.3l0.5-20.7s5.3-4.3 9.6-1.7l-1.2-5c-1.4-0.2-8.4 5.5-8.4 5.5s-0.6-18.8 4.8-19.9-8.9-2.6-9.7-2.2c-0.4 0.2-0.4 13.8-0.2 27.1-3.2 3.1-5.9 6.2-7.1 7.3l0.4-28.5s-4.7-2.6-5.8-1.4l0.2 14.8c-0.3-0.5-0.7-0.9-1-1.3-1-1.3-6.1-4.2-6.1-4.2s1.7 5.6 2.5 6.6c0.7 0.9 3 2.9 4.6 2.2l0.2 16.5c-3.4 3-7.9 6.8-8.5 5.4-1.5-3.2-4.7-3-5.2-1.5-0.5 1.6 4.2 10.2 5.8 10.1 0.8-0.1 4.4-4.9 8-10l0.1 5.3c1.6 2.1 3.8 0.5 4.6-0.7l0.3-11c1.1-1.6 4-4.5 7.1-7.9 0.2 12.1 0.3 22.8 0.3 22.8 4.9-5.2 16.7-4 16.7-4l-0.7-6.9z" fill="#101040"/>
    <g id="west-wind">
      <path id="path4304" d="m48.4 14.3c-8.5 5.7-21.5 6.9-28.8 5.9l-0.9 2c11.7 3.8 26.4 1 31.2-3.2l-1.5-4.7z" fill="#101040"/>
      <path id="path4306" d="m52.5 39.2c-3.6-0.9-7.3-1.4-10.8-1.7 0.8-2.9 1.2-6 1-9.2l-7.8 2c0.6 1.7 0.6 4.3 0.2 7-1.6 0-3.1 0.1-4.5 0.3 0.2-2.7 0.4-3.3-0.5-6l-4.7 1.3c1 1.8 1.5 2.3 1.8 5.1-3.4 1-5.7 1.8-6.9 3.2-5.1 6.1 0 23.2 0 23.2s-0.2-15.4 2-17c2.2-1.6 4.7-1.8 4.7-1.8 0.1 1.5-1.6 6.7-1.6 6.7 2.2-2.7 3.2-3.6 4.3-7.2 1.6-0.5 2.5-0.8 4.1-1-1.6 6.1-4.5 10.9-4.5 10.9l7.4 2c-4.1-0.1-13.3 5.1-13.3 5.1s16.2-4 20.8-1.1l1.2-2.9c-3.4-2.7-10.5-4.9-10.5-4.9s2.2-4.1 4.6-9.4c2.3 0.1 5.6 0.3 7.7 0.9 9.2 4.1-1.7 22.4-1.7 22.4s20.2-21.2 7-27.9z" fill="#101040"/>
    </g>
    <g id="south-wind" fill="#101040">
      <path id="path3389" d="m 45.6679,67.1678 c -0.1335,-0.2298 -1.3685,-2.3813 -2.7444,-4.781 l -2.5016,-4.3633 0.2501,-0.2501 0.2501,-0.2501 0.8927,0.6318 c 1.7593,1.2452 3.1068,1.8546 4.1333,1.869 0.7196,0.01 1.0726,-0.1514 1.5956,-0.7303 0.9673,-1.0707 1.5314,-3.1307 2.2703,-8.2911 0.2662,-1.8588 0.3009,-2.337 0.254,-3.5027 -0.083,-2.0746 -0.5869,-3.7994 -1.5179,-5.1998 -0.8418,-1.2663 -2.0461,-2.1175 -3.4566,-2.443 -0.4043,-0.093 -1.4613,-0.1706 -2.8435,-0.2079 l -2.2,-0.059 -1.8157,2.3049 -1.8157,2.3049 0.6832,-0.063 0.6831,-0.064 0.1037,0.3886 c 0.057,0.2138 0.2153,0.8071 0.3517,1.3186 l 0.2479,0.9298 -0.2191,-0.07 c -0.2626,-0.084 -2.8029,-0.07 -3.5433,0.02 -0.5013,0.061 -0.5283,0.079 -0.6177,0.4269 -0.1733,0.6745 -0.425,2.03 -0.3844,2.0706 0.022,0.022 0.3971,-0.031 0.8333,-0.119 1.0472,-0.2104 2.8611,-0.2208 3.393,-0.019 l 0.4,0.1514 0.028,1.5268 c 0.022,1.2215 0,1.5168 -0.1026,1.4768 -0.5788,-0.2221 -1.5249,-0.3188 -3.1416,-0.321 -0.999,0 -1.8489,0.03 -1.8885,0.069 -0.04,0.04 -0.2908,1.1646 -0.5581,2.5 -0.2673,1.3355 -0.5344,2.6643 -0.5935,2.9531 -0.1046,0.5104 -0.1171,0.525 -0.4505,0.525 -0.2597,0 -0.343,-0.042 -0.3435,-0.175 0,-0.4185 -0.3088,-5.3678 -0.335,-5.3939 -0.043,-0.043 -1.8938,0.5457 -2.4046,0.7647 l -0.4408,0.1889 -0.7095,-0.7317 c -0.3902,-0.4024 -0.7095,-0.7759 -0.7095,-0.83 0,-0.1225 1.6204,-0.7975 2.95,-1.229 0.55,-0.1785 1.0314,-0.3514 1.0698,-0.3842 0.065,-0.056 -0.1022,-2.8163 -0.1753,-2.8958 -0.05,-0.054 -2.0997,0.3714 -2.8398,0.589 -0.3549,0.1044 -0.6547,0.1801 -0.6662,0.1684 -0.047,-0.049 -0.2501,-2.3931 -0.2104,-2.4328 0.059,-0.059 1.3265,-0.3149 2.4219,-0.4893 1.3664,-0.2176 1.35,-0.2109 1.35,-0.5512 0,-0.1714 0.053,-0.2985 0.125,-0.2989 0.2688,-0 4.304,-0.3954 4.3211,-0.4215 0.052,-0.079 0.6474,-4.2176 0.612,-4.2529 -0.055,-0.055 -6.6348,0.3611 -6.9581,0.4398 -0.2829,0.069 -2.0026,0.2944 -3.35,0.4394 -1.8582,0.2 -5.1106,0.7229 -5.3887,0.8664 -0.6258,0.3228 -1.1478,1.1537 -1.4154,2.2527 -0.2188,0.8987 -0.2946,3.3712 -0.1542,5.0269 0.2903,3.4228 1.3936,8.9407 2.657,13.2883 0.142,0.4885 0.2413,0.9051 0.2207,0.9257 -0.021,0.021 -0.2164,-0.092 -0.4351,-0.2506 -0.8339,-0.6041 -3.5144,-5.1409 -4.9413,-8.3634 -2.6247,-5.9277 -2.981,-10.3119 -1.0475,-12.89 0.9844,-1.3125 2.4647,-2.1656 4.6085,-2.6557 2.7538,-0.6296 6.6156,-1.2389 10.1341,-1.5989 1.066,-0.1091 1.9559,-0.2161 1.9776,-0.2377 0.065,-0.065 0.4612,-7.7741 0.4029,-7.8324 -0.076,-0.076 -2.8338,0.3395 -3.6837,0.5553 l -0.7106,0.1805 -1.3409,-1.3018 c -0.7375,-0.716 -1.3038,-1.3389 -1.2585,-1.3842 0.1617,-0.1617 1.6145,-0.4674 4.1751,-0.8787 1.43,-0.2297 2.7076,-0.44 2.8391,-0.4674 l 0.239,-0.05 -0.06,-3.8195 c -0.061,-3.9008 -0.1931,-5.613 -0.5208,-6.7445 -0.092,-0.3163 -0.2129,-0.6314 -0.2694,-0.7001 -0.071,-0.086 -0.066,-0.1687 0.015,-0.2671 0.099,-0.1198 0.247,-0.067 0.9372,0.3326 0.4506,0.2612 2.1243,1.2305 3.7193,2.1542 1.595,0.9236 3.0436,1.7659 3.219,1.8717 l 0.319,0.1925 -0.1979,0.3354 c -0.347,0.5881 -2.1612,6.0179 -2.0484,6.1307 0.022,0.022 0.6183,-0.01 1.3244,-0.065 0.7062,-0.058 1.9276,-0.1359 2.7144,-0.1729 l 1.4304,-0.067 -0.057,0.4901 c -0.032,0.2696 -0.1265,1.3214 -0.211,2.3374 -0.084,1.0159 -0.1666,1.8601 -0.1825,1.876 -0.016,0.016 -0.2137,-0.036 -0.4395,-0.1159 -0.7209,-0.2544 -2.0207,-0.3884 -3.8602,-0.398 l -1.7895,-0.01 -1.0331,3.894 c -0.5683,2.1417 -1.0167,3.9105 -0.9965,3.9306 0.02,0.02 0.9079,-0.01 1.9727,-0.065 3.121,-0.1645 9.0702,-0.2329 11.286,-0.1297 1.8884,0.088 2.1226,0.1199 2.9711,0.4048 3.5044,1.1766 5.7652,3.6548 6.5299,7.1576 0.3137,1.4368 0.2901,4.0689 -0.055,6.136 -0.2295,1.375 -1.16,5.2571 -1.7527,7.3129 -1.4176,4.917 -2.6555,6.8576 -5.3078,8.3207 -0.8027,0.4428 -2.3633,1.1179 -3.4552,1.4947 l -0.5197,0.1794 -0.2427,-0.4178 z m -10.6996,-23.1866 c -0.032,-0.08 -0.056,-0.056 -0.06,0.06 -0,0.1054 0.019,0.1644 0.053,0.1312 0.033,-0.033 0.037,-0.1195 0.01,-0.1917 z"/>
      <path id="path3368" d="m 29.0619,47.2 c -0.2531,-1.0047 -0.8964,-2.0327 -2.77,-4.426 -1.3006,-1.6614 -1.9314,-2.5496 -2.0051,-2.8231 -0.1341,-0.498 -0.3885,-0.8653 -1.0325,-1.4904 l -0.5043,-0.4895 0.3936,-0.088 c 0.5494,-0.1226 4.3558,-0.6655 5.2199,-0.7445 l 0.7135,-0.065 0.068,2.1383 c 0.091,2.8706 0.033,8.4499 -0.083,7.9883 z"/>
    </g> 
    <path id="east-wind" d="m36.5 41.3l0.1-6.4 4.4-0.3-0.3-2.4-4.1 1.2v-5.7c2.4 0.3 5 0.8 7.1 0.9 4.3 0.3-1.2 14.1-1.2 14.1s16.3-14.4 2.6-18.1c-1.4 0-4.9 0.2-8.4 0.4v-3.9l7.5-1.9-7.5-0.1v-4l-4.6-3.4 0.5 8.7-4 2.7 4.1-1 0.2 3.2c-1.8 0.2-3.4 0.3-4.3 0.5-11.5 2.2 1 17.2 1 17.2s-4-14 0.5-15.3c0.9-0.3 1.8-0.3 2.9-0.3l0.4 7-3 0.9 3-0.2 0.2 4.1c-9.2 12.1-19.7 16.6-19.7 16.6s10.2-1.1 20-11.9l1 18.7c-3.7-1.5-7-3.6-7-3.6s2.4 7.1 7.5 10.1l4.3-5.1c-1-0.2-2.1-0.5-3.2-0.9l0.2-18.9c2.7 3.2 9 10.5 11.7 11l9-3c-3.5-0.6-17.7-8.9-20.9-10.9z" fill="#101040"/>
    <!-- dragons -->
    <g id="red-dragon" fill="#BA0000" >
      <path id="path3350" d="m 33.7,70.3608 c -0.9009,-11.0199 -1.6813,-22.0526 -2.702,-33.0608 -0.4004,-3.5458 -0.3299,-7.1389 -0.6169,-10.7 -1.4562,0.2567 -4.6276,-0.6188 -3.5933,1.8115 0.1924,2.9201 0.6382,5.805 1.1357,8.6819 0.086,0.9752 0.5429,3.569 -0.9155,1.9898 -3.116,-2.627 -3.2078,-7.0399 -3.8063,-10.7594 -0.011,-1.8677 -2.2395,-4.5297 1.0818,-4.4984 1.8309,-0.5692 5.1865,0.2923 5.9975,-1.2212 -0.2304,-3.2354 -0.1711,-6.5049 -0.8689,-9.6866 -1.0612,-2.8977 2.1596,-3.97258 4.1399,-2.3879 1.5812,0.8934 5.8509,2.0388 3.8848,4.4922 -1.6257,1.6632 -1.0497,4.075 -1.2134,6.1776 -0.019,0.8199 -0.3187,1.932 0.891,1.4719 2.5675,-0.083 5.1446,-0.3215 7.7101,-0.1959 2.5275,0.4421 4.6745,2.9248 3.9533,5.5586 -1.2578,4.8929 -5.0769,8.5806 -8.6289,11.9496 -1.1626,0.9645 0.4714,-2.1184 0.4094,-2.8196 0.7416,-3.0475 1.6404,-6.1133 1.8588,-9.285 0.3663,-2.1652 -3.2549,-0.5885 -4.5926,-1.2191 -1.8487,-0.8228 -1.8681,0.441 -1.7966,1.8416 -0.3728,14.0016 -0.9076,27.9987 -1.3273,41.9986 -0.3124,-0.056 -0.7738,0.1372 -1.0006,-0.1394 z" />
      <path id="path3348" d="m 39.1,37.3873 c -2.6463,-0.1431 -5.306,0.016 -7.9456,-0.2414 -1.9723,-0.2403 -3.9522,-0.4091 -5.9318,-0.5764 -0.5693,-0.3617 -0.6089,-1.2127 -0.871,-1.8011 -0.1725,-0.3512 0,-0.4284 0.3393,-0.3681 1.9127,-0.032 3.8236,0.08 5.7252,0.2827 4.3112,0.2777 8.6348,0.3933 12.9545,0.3321 0.4295,0.053 1.312,-0.1778 1.4377,0.1312 -0.588,0.7905 -1.2745,1.5004 -1.9198,2.2433 -1.2626,0.029 -2.528,0.065 -3.7885,-0 z"/>
      <!--path id="path3338" d="m 34,70 c -1,-5 -1,-10 -1,-14 -1,-7 -2,-14 -2,-20 0,-3 0,-5 -1,-7 0,-1 0,-2 -1,-2 -1,0 -2,0 -2,1 0,2 0,4 0,7 1,0 1,1 1,2 0,1 0,2 0,3 -2,-1 -3,-3 -4,-5 0,-3 -1,-5 -1,-7 0,-2 -2,-3 1,-4 2,0 4,-1 6,-1 0,0 0,-2 0,-2 0,-2 0,-4 0,-6 -1,-2 -1,-5 1,-5.3 2,0.1 5,1.3 7,3.3 0,1 -2,3 -2,5 0,1 0,3 0,5 2,0 4,0 5,0 2,-1 4,-1 5,0 1,0 3,1 3,3 0,2 0,3 -1,5 -2,3 -4,6 -6,8 -2,2 -2,-1 -1,-2 0,-1 -1,-2 1,-3 0,0 0,-2 0,-2 0,-2 0,-4 1,-5 -2,0 -5,0 -7,0 0,6 0,12 0,19 -1,6 -1,12 -1,18 0,2 0,4 0,7 -1,1 -1,0 -1,-1 z" /-->
      <!--path id="path3340" d="m 35,37 c -3,0 -7,0 -10,0 0,-1 0,-1 -1,-2 0,0 0,0 0,-1 0,0 0,0 0,0 1,0 2,0 3,0 1,0 1,1 2,1 5,0 11,0 16,0 -1,1 -1,1 -2,2 -3,0 -5,0 -8,0 z" /-->
    </g>
    <g id="green-dragon" fill="#004C00">
      <path id="path3352" d="m 42.7387,63.325 c -0.998,-2.7004 -2.8125,-4.991 -4.4475,-7.3283 -2.1887,1.8509 -4.4161,4.0535 -7.3437,4.5541 -1.5697,0.062 -2.2376,-1.3014 -0.4242,-1.7503 2.2029,-1.4421 4.2785,-3.0832 6.175,-4.9103 -1.8003,-2.2983 -3.5866,-4.6077 -5.4069,-6.8902 5.2183,-0.062 10.4764,-0.3735 15.6677,-0.3329 -0.8568,0.9164 -1.4954,2.8208 -2.974,2.6889 -2.1911,0.097 -4.4106,0.033 -6.5675,0.4546 2.5959,3.2538 6.0035,6.068 7.8078,9.9325 0.6742,1.117 0.1687,2.0053 -0.8383,2.5538 -0.4738,0.229 -1.2568,1.3545 -1.6484,1.0281 z m -18.569,-1.1049 c -1.4094,-3.6263 -2.8091,-7.2565 -4.1891,-10.8941 0.7543,-1.3046 1.3062,0.133 1.828,0.7741 0.9944,1.1489 1.9723,4.0059 3.5472,1.761 2.2231,-1.9639 3.2993,-4.8051 4.1505,-7.5611 1.2935,3.199 1.556,7.203 -0.8375,9.9742 -1.4305,1.8228 -3.3629,3.543 -3.4328,6.0378 -0.2826,0.2157 -0.9894,0.4783 -1.0663,-0.092 z m -1.6336,-11.7301 c -0.6093,-0.9137 1.1707,-2.1084 1.3384,-3.1993 0.6081,-1.1949 1.5724,-2.4905 -0.4309,-2.2031 -1.0194,-0.5484 -4.0475,-2.9571 -1.1348,-2.3068 1.9386,0.2507 4.0913,0.5163 4.1609,-2.0319 1.3162,-2.0364 -1.7527,-0.075 -1.6915,-1.6543 0.2512,-0.6764 1.5788,-0.9426 2.2135,-1.473 1.4749,-0.6089 3.9618,-2.6994 4.8237,-2.4546 -0.9622,2.6873 -2.2579,5.2615 -3.2991,7.9006 1.2598,1.2796 -1.8335,1.5775 -1.8423,3.1547 -1.0919,1.3958 -2.4339,4.4325 -4.1379,4.2677 z m 8.993,-4.96 c 0.07,-1.5861 1.6215,-4.2909 1.6775,-6.3529 0.2509,-1.4521 -0.1866,-3.478 1.9651,-2.5548 2.3993,0.1652 4.7985,0.3337 7.1992,0.4774 -0.5289,1.9146 -1.6233,3.7423 -1.6991,5.7865 0.84,1.0277 3.2106,0.4312 3.5278,1.5374 -0.093,1.3625 -2.7125,0.3895 -3.7399,0.8206 -1.0883,0.1009 -3.5062,0.3932 -3.0308,-1.3508 -0.026,-1.5818 1.6101,-4.2327 -1.0281,-3.6342 -0.9697,0.4649 -1.0055,2.3543 -1.856,3.1893 -0.6592,1.0176 -1.5996,2.4356 -3.0157,2.0815 z m -20.1189,-1.7628 c -0.2007,-1.352 2.4944,-1.9231 3.2489,-3.0604 2.5219,-2.0801 4.9,-4.3511 6.9553,-6.8984 -1.0792,-1.1812 -2.1848,-2.3391 -3.2324,-3.5486 0.2924,-1.4452 1.3189,-0.3182 2.0441,0.075 0.8413,0.5214 1.6826,1.0429 2.5239,1.5643 1.4532,-1.958 2.6854,-4.1114 3.6479,-6.3501 -1.1911,-0.6479 -5.0092,-1.9764 -1.9139,-3.2085 2.1635,-0.8804 4.8286,-1.0343 5.983,1.4192 1.2833,1.0399 2.4989,4.4763 3.9649,1.9604 0.9531,-0.9351 1.1055,-2.3989 1.7038,-3.5683 0.7441,-1.3293 1.0731,-3.9055 2.1241,-4.3264 3.8257,2.6661 7.876,5.1593 11.0579,8.608 1.3526,3.1593 -3.1523,0.347 -4.3924,-0.2487 -1.66,-0.204 -4.0519,-3.8467 -5.0238,-1.3267 -0.1607,0.8248 -1.7442,1.8754 -0.7336,2.5335 2.0753,1.5343 4.1315,3.0445 6.3443,4.3748 4.2952,2.6309 8.8566,5.2889 13.9276,5.9074 0.022,2.0064 -3.6717,1.765 -5.2078,2.8054 -1.8109,0.6385 -3.6224,1.2755 -5.4324,1.9169 -3.6983,-3.6008 -7.411,-7.187 -11.077,-10.8208 -2.4984,0.983 -4.9893,1.9851 -7.4969,2.9445 -1.3257,-0.7868 0.1782,-1.2437 0.8565,-1.7051 1.5275,-0.972 3.1645,-1.8306 4.5857,-2.9232 -0.6419,-0.4117 -1.6964,-2.4734 -2.3937,-1.8828 -5.5558,7.1602 -12.7745,13.6123 -21.6634,16.1164 -0.3124,0.1966 -0.2675,-0.1823 -0.4006,-0.3578 z"/>
      <path id="path3354" d="m 37.35,55.3395 c -0.28,-0.5884 -1.6624,-1.2083 -0.3429,-1.4393 0.7916,-0.9146 1.5456,-1.8283 2.5118,-2.5828 1.1806,-1.1506 2.3262,-2.3528 3.1244,-3.8097 0.4062,-0.4147 0.8482,-0.95 1.4906,-0.8318 0.9983,-0.036 1.9967,-0.072 2.995,-0.1079 -2.0821,2.6357 -4.388,5.1032 -6.8648,7.3707 -0.9445,0.4343 -1.6967,1.8555 -2.6109,1.7967 -0.025,-0.1539 -0.3035,-0.2295 -0.3032,-0.3959 z m 0.7,-24.456 c -0.7214,-0.3823 -2.4501,-1.203 -0.896,-1.7513 1.176,-0.7135 2.4142,-1.3202 3.4941,-2.1832 1.3606,-0.8078 2.6094,-1.8015 4.0168,-2.5251 0.6321,-0.3057 1.307,-0.5024 1.9738,-0.7149 1.2022,1.0084 2.4825,2.0216 3.2852,3.3842 0.2727,1.4719 -1.9944,0.8245 -2.8343,1.2452 -2.0691,0.5086 -4.1008,1.1651 -6.0504,2.0255 -1.0493,0.1566 -2.0093,1.3824 -2.9892,0.5196 l 0,0 z"/>
    </g>
    <g id="white-dragon">
      <rect id="rect4376" height="69" width="45" y="6" x="13" fill="#BFBFBF"/>
      <rect id="rect4378" height="65" width="41" y="8" x="15" fill="#F4F4F4"/>
    </g>
    <!-- characters -->
    <g id="one-character">
      <path id="path4240" d="m43.8 18.1c-0.3 0.2-0.4 0.5-0.4 0.8s0.1 0.5 0.1 0.7c-2.6 0.2-19.7 1.8-23.9 1.4h-0.4l1.7 6 0.3-0.1c3.3-1.1 24.1-2.4 29-1.4 0.8 0.1 1.2 0 1.4-0.4 0.5-1-1.9-3.5-3.4-4.8-0.9-0.9-3.4-2.8-4.4-2.2z" fill="#20208C"/>
      <use id="use3814" xlink:href="#ten-thousand"/>
    </g>
    <g id="two-character">
      <path id="path4242" d="m43.9 23.9c-0.3 0.2-0.4 0.5-0.4 0.9 0 0.2 0 0.5 0.1 0.7-2.8 0.3-19.9 1.9-24.1 1.4l-0.5-0.1 1.7 6.2 0.4-0.1c3.3-1.2 24.3-2.4 29.3-1.4 0.8 0.2 1.3 0 1.5-0.4 0.7-1.3-3-4.6-3.4-4.9-1-1-3.5-3-4.6-2.3z" fill="#20208C"/>
      <path id="path4244" d="m36.1 12.9c-2.6 0.9-6.2 2.2-12.3 2.2h-0.7l2.9 4.2 16.7-2.2 0.5-3.1-0.1-0.1c-2.4-2.7-4.1-2.1-7-1z" fill="#20208C"/>
      <use id="use3816" xlink:href="#ten-thousand"/>
    </g>
    <g id="three-character">
      <path id="path4246" d="m43.7 26.3c-0.3 0.2-0.4 0.5-0.4 0.9 0 0.3 0 0.5 0.1 0.7-2.7 0.3-19.3 1.9-23.4 1.4l-0.5-0.1 1.7 6.2 0.3-0.1c3.2-1.2 23.6-2.4 28.4-1.4 0.8 0.2 1.3 0 1.5-0.4 0.6-1.3-2.9-4.6-3.3-5-1-0.8-3.4-2.9-4.4-2.2z" fill="#20208C"/>
      <polygon id="polygon4248" points="37.3 19 26 20.4 27.6 24.7 39.6 23.3 37.6 19" fill="#20208C"/>
      <path id="path4250" d="m34.9 8.6c-3 1.1-7 2.6-14 2.6h-0.6l3.2 4.9 18.9-2.6 0.6-3.6-0.1-0.1c-2.7-3.2-4.6-2.5-8-1.2z" fill="#20208C"/>
      <use id="use3818" xlink:href="#ten-thousand"/>
    </g>
    <g id="four-character">
      <path id="path3338" fill="#20208C" d="m 25.8,30.9 c -2.2,-6.4 -4.5,-12.8 -6.75,-19.1 1.8,0.3 3.6,0.8 5.4,1.2 0.5,1.97 1.08,3.9 1.75,5.86 0.82,2.89 1.47,5.82 2.28,8.72 1.22,-0.20 2.44,-0.55 3.58,-1.00 -0.19,-2.78 -0.40,-5.58 -1.04,-8.30 -0.01,-0.98 -0.82,-1.57 -1.50,-1.59 1.04,-0.35 2.11,-0.71 3.05,-1.27 0.54,-0.18 0.34,1.29 0.54,1.71 0.52,2.99 1.03,5.99 1.66,8.96 0.88,-0.21 2.81,0.17 2.60,-1.20 0.15,-3.12 0.36,-6.26 0.34,-9.39 0.42,-0.52 1.75,0.49 2.47,0.70 0.52,0.39 2.63,0.81 1.26,1.37 -1.06,1.05 -1.12,2.68 -1.41,4.07 -0.19,1.23 -0.31,2.47 -0.40,3.71 1.07,0.01 2.26,-0.08 3.19,0.53 0.39,0.82 1.30,1.83 0.75,2.75 -0.49,0.28 -1.43,1.65 -1.75,1.19 0.34,-1.35 -1.25,-1.56 -2.21,-1.47 -3.65,0.08 -7.20,1.11 -10.69,2.11 -0.99,0.29 -1.97,0.62 -2.96,0.94 -0.06,-0.18 -0.12,-0.37 -0.19,-0.56 z" />
      <path id="path3340" fill="#20208C" d="m 41.90,29.77 c 0.20,-1.22 0.92,-2.25 1.32,-3.40 1.48,-2.93 2.02,-6.22 2.43,-9.45 0.06,-0.39 0.13,-0.79 -0.30,-0.99 -1.06,-0.90 -2.58,-0.58 -3.86,-0.66 -3.53,-0.06 -6.99,0.73 -10.44,1.34 -1.28,0.29 -2.59,0.52 -3.85,0.90 -0.48,-0.05 -1.84,0.92 -1.59,-0.02 0.06,-1.00 0.12,-2.01 0.25,-3.01 3.99,-1.17 8.08,-2.03 12.23,-2.45 3.61,-0.29 7.42,-0.35 10.81,1.12 1.19,0.51 2.21,1.39 2.92,2.48 -1.56,4.71 -4.13,9.16 -7.70,12.64 -0.73,0.66 -1.45,1.36 -2.25,1.94 -0.01,-0.14 0.02,-0.28 0.04,-0.42 z" />
      <use id="use3820" xlink:href="#ten-thousand"/>
    </g>
    <g id="five-character">
      <path id="path4252" d="m29.8 10.3l-10.3 10.5 0.4 0.5 7-4c-0.6 1.5-4.3 11.6-4.3 11.6l3.3 3.5s2.4-15.6 2.4-15.9c0.3-0.2 5.1-2.9 5.1-2.9l-3.4-3.7-0.2 0.4z" fill="#20208C"/>
      <path id="path4254" d="m42.6 10.2h-1.9s-0.6 1.3-0.9 1.9l-0.1-0.1-5.9 3.5 0.2 0.7s3-0.2 3.9-0.2c-0.4 0.8-2.2 4.5-2.3 4.8-0.4 0-6.3 0.5-6.3 0.5l-0.1 0.7 4 1.6s0.7-0.3 1.3-0.5c-0.6 1.2-2.5 5.2-2.7 5.5-1.3 0.1-2.3 0.1-2.9 0h-0.4l0.5 3.7 0.3-0.1c1.4-0.2 12.2-1.6 14.1-1.7 1.8-0.1 7.3 2.1 7.4 2.1l0.7 0.3-0.2-0.7c-0.1-0.4-1.3-3.9-2.2-4.8l-0.1-0.1h-0.1c-0.8-0.2-3.6 0-7.5 0.4 0.9-1 4.3-4.6 4.3-4.6l-3.2-3.4s-2.9 7.8-3 8.2c-0.3 0-2.7 0.3-3.5 0.3 0.4-0.9 2.5-6.5 2.6-6.7 0.3-0.1 3.2-1.2 3.2-1.2l-0.2-0.7s-1.7 0.3-2.5 0.4c0.3-0.9 1.6-4.1 1.7-4.4 0.2 0 1.2-0.1 1.2-0.1s-0.6-0.9-0.7-1.1c0.1-0.3 1.7-4.4 1.7-4.4h-0.4z" fill="#20208C"/>
      <use id="use3822" xlink:href="#ten-thousand"/>
    </g>
    <g id="six-character">
      <path id="path4256" d="m33.2 9.8v1c0 1.6-0.2 3.7-0.7 6.2-5.9 0.7-11.1 1.5-11.2 1.5h-0.3v2.5s9.9-0.4 10.7-0.5c-0.2 0.7-1 4-1 4l0.6 0.3s2.9-4.1 3.1-4.4c11.7-0.3 14.4 0.2 15 0.5l0.6 0.4-0.6-3.5c-0.3-1-2-2.1-12.2-1.3 0.6-0.9 3.2-4.6 3.2-4.6l-7.2-2.7v0.6z" fill="#20208C"/>
      <path id="path4258" d="m27.6 24.8s0.8 4.7-1.6 8.5l0.5 0.5c4.4-2.9 5.9-6.6 5.9-6.7l0.1-0.3-5-2.6 0.1 0.6z" fill="#20208C"/>
      <path id="path4260" d="m37.1 23.7c0.2 0.3 5.9 7.7 7.9 9.6l0.1 0.1h0.2c0.4 0 0.8-0.3 1.1-0.7 0.8-1.1 1.3-3.2 1-4.3-0.4-1.3-7.6-4.3-9.8-5.2l-1.2-0.5 0.7 1z" fill="#20208C"/>
      <use id="use3824" xlink:href="#ten-thousand"/>
    </g>
    <g id="seven-character">
      <path id="path4262" d="m43.2 11.7c-0.2 0.4-1.5 1.9-8.3 7.6-0.1-0.7-0.2-1.6-0.2-1.6-0.2-1.9-0.4-4.1-0.8-6.5l-0.1-0.3-3.2 0.3v0.3 1.7c0 3.3 0.3 6.2 0.9 8.9-0.3 0.2-10 8.2-10 8.2l0.3 0.3 1.9 1.8s7.9-6.9 8.6-7.6c0.7 2.2 1.6 4 2.7 5 2 2 4.2 1.7 7 1.3 2-0.3 4.3-0.6 7-0.2l0.5 0.1-0.6-2.8c0-0.6-0.3-1.1-0.7-1.5-1.3-0.9-3.8-0.4-6.5 0.1-1.3 0.3-2.7 0.5-3.9 0.6-1.3-1.2-2.1-2.8-2.6-5.2 7.5-6.2 10.3-7.8 11.3-8.1l0.2-0.1v-0.3-0.4c0-1.8-0.9-2.8-1.7-3-0.5 0.1-1.3 0.3-1.8 1.4z" fill="#20208C"/>
      <use id="use3826" xlink:href="#ten-thousand"/>
    </g>
    <g id="eight-character">
      <path id="path4264" d="m24.4 19c0 3.7-4.5 9.2-4.7 9.4l-0.7 0.9 1.1-0.3c5.2-1.4 8.2-5 8.3-5.1l0.2-0.2-4.2-5.7v1z" fill="#20208C"/>
      <path id="path4266" d="m29.9 11.3l-2 0.3 0.3 0.5c0.1 0.2 9.3 15.7 10.6 19.3l0.1 0.3 0.3-0.1c2.2-0.4 4-0.2 5.8 0 2.2 0.2 4.3 0.4 6.7-0.4l0.4-0.1-0.2-0.4c-1.2-2-2.5-2.4-4.2-2.9-3.2-0.9-8-2.3-17.3-16.3l-0.1-0.2h-0.4z" fill="#20208C"/>
      <use id="use3828" xlink:href="#ten-thousand"/>
    </g>
    <g id="nine-character">
      <path id="path4268" d="m48.6 23.6s-2.9 3.2-3.1 3.4c-3.2 0.7-8.4 1.2-8.8-0.4-0.5-1.9 3.4-10.4 4.9-13.6l0.2-0.3-5.6-2.8-0.1 0.4c-0.1 0.2-0.4 1.3-0.9 3h-4.5c0-0.4-0.1-1.3-0.1-1.3-1.4-2.3-7.4-0.7-8.1-0.6l-0.4 0.1 0.2 0.4c0.2 0.4 0.4 0.9 0.5 1.4h-3.8l1.9 3.6s1.8-0.3 2.4-0.4v0.7c0 6.2-2.7 14.1-2.7 14.2l0.6 0.3c0.3-0.4 7.9-9.5 9.3-16.4 0.2 0 2.4-0.4 4.4-0.7-1.2 4.7-2.6 12.1-0.3 14.8 3.4 4 16.6 3.7 17.1 3.5l0.3-0.1-3.4-9.2z" fill="#20208C"/>
      <use id="use3830" xlink:href="#ten-thousand"/>
    </g>
    <!-- bamboo -->
    <g id="one-bamboo">
      <use id="use4058" xlink:href="#bamboo" stroke="#006C00" transform="translate(29 25) scale(1.18 1.15)"/>
    </g>
    <g id="two-bamboo">
      <use id="use4062" xlink:href="#bamboo" stroke="#006C00" transform="translate(30 9.5)"/>
      <use id="use4064" xlink:href="#bamboo" stroke="#006C00" transform="translate(30 44.5)"/>
    </g>
    <g id="three-bamboo">
      <use id="use4070" xlink:href="#bamboo" stroke="#006C00" transform="translate(18 44.5)"/>
      <use id="use4074" xlink:href="#bamboo" stroke="#006C00" transform="translate(30 9.5)"/>
      <use id="use4078" xlink:href="#bamboo" stroke="#006C00" transform="translate(41 44.5)"/>
    </g>
    <g id="four-bamboo">
      <use id="use4082" xlink:href="#bamboo" stroke="#006C00" transform="translate(18 9.5)"/>
      <use id="use4084" xlink:href="#bamboo" stroke="#006C00" transform="translate(18 44.5)"/>
      <use id="use4090" xlink:href="#bamboo" stroke="#006C00" transform="translate(42 9.5)"/>
      <use id="use4092" xlink:href="#bamboo" stroke="#006C00" transform="translate(42 44.5)"/>
    </g>
    <g id="five-bamboo">
      <use id="use4098" xlink:href="#bamboo" stroke="#006C00" transform="translate(18 10.5) scale(.91 .925)"/>
      <use id="use4100" xlink:href="#bamboo" stroke="#006C00" transform="translate(18 45.5) scale(.91 .925)"/>
      <use id="use4108" xlink:href="#bamboo" stroke="#9C0000" transform="translate(30.5 28) scale(.91 .925)"/>
      <use id="use4110" xlink:href="#bamboo" stroke="#006C00" transform="translate(43 10.5) scale(.91 .925)"/>
      <use id="use4112" xlink:href="#bamboo" stroke="#006C00" transform="translate(43 45.5) scale(.91 .925)"/>
    </g>
    <g id="six-bamboo">
      <use id="use4118" xlink:href="#bamboo" stroke="#006C00" transform="translate(19 12.5) scale(.82 .85)"/>
      <use id="use4120" xlink:href="#bamboo" stroke="#006C00" transform="translate(19 45.5) scale(.82 .85)"/>
      <use id="use4126" xlink:href="#bamboo" stroke="#006C00" transform="translate(31 12.5) scale(.82 .85)"/>
      <use id="use4128" xlink:href="#bamboo" stroke="#006C00" transform="translate(31 45.5) scale(.82 .85)"/>
      <use id="use4134" xlink:href="#bamboo" stroke="#006C00" transform="translate(43 12.5) scale(.82 .85)"/>
      <use id="use4136" xlink:href="#bamboo" stroke="#006C00" transform="translate(43 45.5) scale(.82 .85)"/>
    </g>
    <g id="seven-bamboo">
      <use id="use4142" xlink:href="#bamboo" stroke="#006C00" transform="translate(19.5 31.5) scale(.73 .66)"/>
      <use id="use4144" xlink:href="#bamboo" stroke="#006C00" transform="translate(31.5 31.5) scale(.73 .66)"/>
      <use id="use4146" xlink:href="#bamboo" stroke="#006C00" transform="translate(43.5 31.5) scale(.73 .66)"/>
      <use id="use4148" xlink:href="#bamboo" stroke="#006C00" transform="translate(19.5 50.5) scale(.73 .66)"/>
      <use id="use4150" xlink:href="#bamboo" stroke="#006C00" transform="translate(31.5 50.5) scale(.73 .66)"/>
      <use id="use4152" xlink:href="#bamboo" stroke="#006C00" transform="translate(43.5 50.5) scale(.73 .66)"/>
      <use id="use4166" xlink:href="#bamboo" stroke="#9C0000" transform="translate(31.5 12.5) scale(.73 .66)"/>
    </g>
    <g id="eight-bamboo">
      <use id="use4170" xlink:href="#bamboo" stroke="#006C00" transform="translate(19.5 13.5) scale(.73 .77)"/>
      <use id="use4172" xlink:href="#bamboo" stroke="#006C00" transform="translate(19.5 46.5) scale(.73 .77)"/>
      <use id="use4178" xlink:href="#bamboo" stroke="#006C00" transform="translate(43.5 13.5) scale(.73 .77)"/>
      <use id="use4180" xlink:href="#bamboo" stroke="#006C00" transform="translate(43.5 46.5) scale(.73 .77)"/>
      <use id="use4182" xlink:href="#bamboo-rgt" stroke="#006C00" transform="translate(28.0 14.0) scale(.77 .77)"/>
      <use id="use4184" xlink:href="#bamboo-lft" stroke="#006C00" transform="translate(35.0 14.0) scale(.77 .77)"/>
      <use id="use4182" xlink:href="#bamboo-rgt" stroke="#006C00" transform="translate(35.0 47.0) scale(.77 .77)"/>
      <use id="use4184" xlink:href="#bamboo-lft" stroke="#006C00" transform="translate(28.0 47.0) scale(.77 .77)"/>
    </g>
    <g id="nine-bamboo">
      <use id="use4186" xlink:href="#bamboo" stroke="#006C00" transform="translate(19.5 12.5) scale(.73 .66)"/>
      <use id="use4188" xlink:href="#bamboo" stroke="#006C00" transform="translate(19.5 31.5) scale(.73 .66)"/>
      <use id="use4190" xlink:href="#bamboo" stroke="#006C00" transform="translate(19.5 50.5) scale(.73 .66)"/>
      <use id="use4198" xlink:href="#bamboo" stroke="#9C0000" transform="translate(31.5 12.5) scale(.73 .66)"/>
      <use id="use4200" xlink:href="#bamboo" stroke="#9C0000" transform="translate(31.5 31.5) scale(.73 .66)"/>
      <use id="use4202" xlink:href="#bamboo" stroke="#9C0000" transform="translate(31.5 50.5) scale(.73 .66)"/>
      <use id="use4210" xlink:href="#bamboo" stroke="#006C00" transform="translate(43.5 12.5) scale(.73 .66)"/>
      <use id="use4212" xlink:href="#bamboo" stroke="#006C00" transform="translate(43.5 31.5) scale(.73 .66)"/>
      <use id="use4214" xlink:href="#bamboo" stroke="#006C00" transform="translate(43.5 50.5) scale(.73 .66)"/>
    </g>
    <!-- season tiles -->
    <g id="season-1"> <!-- 2112 -->
      <use id="use3850" y="6" x="13" xlink:href="#season"/>
      <path id="path4428" stroke="#678ED3" d="m27.6 16.1c-0.8-2.5 4.7 2.6 2.6 2.2s-10.6 0.1-11.9 0.6l-0.6-2.2c1.8 0.2 9.9-0.6 9.9-0.6z" fill="#99B9FF"/>
    </g>
    <g id="season-2"> <!-- 2176 -->
      <use id="use3852" y="6" x="13" xlink:href="#season"/>
      <path id="path4434" stroke="#678ED3" d="m27.6 18.9c-0.8-2.5 4.7 2.6 2.6 2.2s-10.6 0.1-11.9 0.6l-0.6-2.2c1.8 0.2 9.9-0.6 9.9-0.6z" fill="#99B9FF"/>
      <path id="path4436" stroke="#678ED3" d="m27.1 14.5c-2-2.3-2.8 0.6-9 0.6l1.1 1.7 7.7-1 0.2-1.3z" fill="#99B9FF"/>
    </g>
    <g id="season-3"> <!-- 2240 -->
      <use id="use3854" y="6" x="13" xlink:href="#season"/>
      <path id="path4426" stroke="#678ED3" d="m27.6 19.9c-0.8-2.5 4.7 2.6 2.6 2.2s-10.6 0.1-11.9 0.6l-0.6-2.2c1.8 0.2 9.9-0.6 9.9-0.6z" fill="#99B9FF"/>
      <polygon id="polygon4430" stroke="#678ED3" points="24.9 16.3 25.7 17.8 20.9 18.3 20.4 16.8" fill="#99B9FF"/>
      <path id="path4432" stroke="#678ED3" d="m27.1 12.5c-2-2.3-2.8 0.6-9 0.6l1.1 1.7 7.7-1 0.2-1.3z" fill="#99B9FF"/>
    </g>
    <g id="season-4"> <!-- 2304 -->
      <use id="use3856" y="6" x="13" xlink:href="#season"/>
      <path id="path4424" stroke="#678ED3" d="m19.8 13.9l-0.1 1.3s8.9-2.4 9.4-0.6c0 0-0.4 4.1-1.4 4.9 0-0.5-0.7-0.6-1.7-0.5 0.1-1.1 0.3-3.7 1-4l-1.6-0.7-0.2 4.8-1.5 0.3-0.9-4.8-1 0.4 0.9 4.7c-1.1 0.3-2 0.5-2 0.5l-1.8-7-2.2-0.5 3.1 8.9s7.7-2.7 7.5-0.7c3.2-2.5 4.3-6.5 4.3-6.5-2.2-3.4-11.8-0.5-11.8-0.5z" fill="#99B9FF"/>
    </g>
    <!-- flower tiles -->
    <g id="flower-1"> <!-- 2432 -->
      <use id="use3866" y="6" x="13" xlink:href="#flower"/>
      <path id="path4456" stroke="#7C5A2D" stroke-width=".5" d="m26.9 22.5c-0.8-2.5 4.7 2.6 2.6 2.2s-10.6 0.1-11.9 0.6l-0.6-2.2c1.9 0.2 9.9-0.6 9.9-0.6z" fill="#DBC879"/>
    </g>
    <g id="flower-2"> <!-- 2496 -->
      <use id="use3868" y="6" x="13" xlink:href="#flower"/>
      <path id="path4462" stroke="#7C5A2D" stroke-width=".5" d="m26.9 25.3c-0.8-2.5 4.7 2.6 2.6 2.2s-10.6 0.1-11.9 0.6l-0.6-2.2c1.9 0.2 9.9-0.6 9.9-0.6z" fill="#DBC879"/>
      <path id="path4464" stroke="#7C5A2D" stroke-width=".5" d="m26.5 20.8c-2-2.3-2.8 0.6-9 0.6l1.1 1.7 7.7-1 0.2-1.3z" fill="#DBC879"/>
    </g>
    <g id="flower-3"> <!-- 2560 -->
      <use id="use3870" y="6" x="13" xlink:href="#flower"/>
      <path id="path4454" stroke="#7C5A2D" stroke-width=".5" d="m26.9 26.3c-0.8-2.5 4.7 2.6 2.6 2.2s-10.6 0.1-11.9 0.6l-0.6-2.2c1.9 0.2 9.9-0.6 9.9-0.6z" fill="#DBC879"/>
      <polygon id="polygon4458" stroke="#7C5A2D" stroke-width=".5" points="24.3 22.6 25 24.1 20.3 24.7 19.7 23.2" fill="#DBC879"/>
      <path id="path4460" stroke="#7C5A2D" stroke-width=".5" d="m26.5 18.8c-2-2.3-2.8 0.6-9 0.6l1.1 1.7 7.7-1 0.2-1.3z" fill="#DBC879"/>
    </g>
    <g id="flower-4"> <!-- 2624 -->
      <use id="use3872" y="6" x="13" xlink:href="#flower"/>
      <path id="path4452" stroke="#7C5A2D" stroke-width=".5" d="m19.1 20.3l-0.1 1.3s8.9-2.4 9.4-0.6c0 0-0.4 4.1-1.4 4.9 0-0.5-0.7-0.6-1.7-0.5 0.1-1.1 0.3-3.7 1-4l-1.6-0.7-0.2 4.8-1.5 0.3-0.9-4.8-1 0.4 0.9 4.7c-1.1 0.3-2 0.5-2 0.5l-1.8-7-2.2-0.6 3.1 8.9s7.7-2.7 7.5-0.7c3.2-2.5 4.3-6.5 4.3-6.5-2.2-3.3-11.8-0.4-11.8-0.4z" fill="#DBC879"/>
    </g>
  </defs>
  <!-- plain tiles -->
  <use id="use3642" y="0" x="0" xlink:href="#plain-tile"/>
  <use id="use5000" y="0" x="0" xlink:href="#one-coin"/>
  <use id="use3644" y="0" x="64" xlink:href="#plain-tile"/>
  <use id="use5002" y="0" x="64" xlink:href="#two-coins"/>
  <use id="use3646" y="0" x="128" xlink:href="#plain-tile"/>
  <use id="use5004" y="0" x="128" xlink:href="#three-coins"/>
  <use id="use3648" y="0" x="192" xlink:href="#plain-tile"/>
  <use id="use5006" y="0" x="192" xlink:href="#four-coins"/>
  <use id="use3650" y="0" x="256" xlink:href="#plain-tile"/>
  <use id="use5008" y="0" x="256" xlink:href="#five-coins"/>
  <use id="use3652" y="0" x="320" xlink:href="#plain-tile"/>
  <use id="use5010" y="0" x="320" xlink:href="#six-coins"/>
  <use id="use3654" y="0" x="384" xlink:href="#plain-tile"/>
  <use id="use5012" y="0" x="384" xlink:href="#seven-coins"/>
  <use id="use3656" y="0" x="448" xlink:href="#plain-tile"/>
  <use id="use5014" y="0" x="448" xlink:href="#eight-coins"/>
  <use id="use3658" y="0" x="512" xlink:href="#plain-tile"/>
  <use id="use5016" y="0" x="512" xlink:href="#nine-coins"/>
  <use id="use3660" y="0" x="576" xlink:href="#plain-tile"/>
  <use id="use5020" y="0" x="576" xlink:href="#north-wind"/>
  <use id="use3662" y="0" x="640" xlink:href="#plain-tile"/>
  <use id="use5022" y="0" x="640" xlink:href="#west-wind"/>
  <use id="use3664" y="0" x="704" xlink:href="#plain-tile"/>
  <use id="use5024" y="0" x="704" xlink:href="#south-wind"/>
  <use id="use3666" y="0" x="768" xlink:href="#plain-tile"/>
  <use id="use5026" y="0" x="768" xlink:href="#east-wind"/>
  <use id="use3668" y="0" x="832" xlink:href="#plain-tile"/>
  <use id="use5028" y="0" x="832" xlink:href="#red-dragon"/>
  <use id="use3670" y="0" x="896" xlink:href="#plain-tile"/>
  <use id="use5030" y="0" x="896" xlink:href="#green-dragon"/>
  <use id="use3672" y="0" x="960" xlink:href="#plain-tile"/>
  <use id="use5032" y="0" x="960" xlink:href="#one-character"/>
  <use id="use3674" y="0" x="1024" xlink:href="#plain-tile"/>
  <use id="use5034" y="0" x="1024" xlink:href="#two-character"/>
  <use id="use3676" y="0" x="1088" xlink:href="#plain-tile"/>
  <use id="use5036" y="0" x="1088" xlink:href="#three-character"/>
  <use id="use3678" y="0" x="1152" xlink:href="#plain-tile"/>
  <use id="use5038" y="0" x="1152" xlink:href="#four-character"/>
  <use id="use3680" y="0" x="1216" xlink:href="#plain-tile"/>
  <use id="use5040" y="0" x="1216" xlink:href="#five-character"/>
  <use id="use3682" y="0" x="1280" xlink:href="#plain-tile"/>
  <use id="use5042" y="0" x="1280" xlink:href="#six-character"/>
  <use id="use3684" y="0" x="1344" xlink:href="#plain-tile"/>
  <use id="use5044" y="0" x="1344" xlink:href="#seven-character"/>
  <use id="use3686" y="0" x="1408" xlink:href="#plain-tile"/>
  <use id="use5046" y="0" x="1408" xlink:href="#eight-character"/>
  <use id="use3688" y="0" x="1472" xlink:href="#plain-tile"/>
  <use id="use5048" y="0" x="1472" xlink:href="#nine-character"/>
  <use id="use3690" y="0" x="1536" xlink:href="#plain-tile"/>
  <use id="use5050" y="0" x="1536" xlink:href="#one-bamboo"/>
  <use id="use3692" y="0" x="1600" xlink:href="#plain-tile"/>
  <use id="use5052" y="0" x="1600" xlink:href="#two-bamboo"/>
  <use id="use3694" y="0" x="1664" xlink:href="#plain-tile"/>
  <use id="use5054" y="0" x="1664" xlink:href="#three-bamboo"/>
  <use id="use3696" y="0" x="1728" xlink:href="#plain-tile"/>
  <use id="use5056" y="0" x="1728" xlink:href="#four-bamboo"/>
  <use id="use3698" y="0" x="1792" xlink:href="#plain-tile"/>
  <use id="use5058" y="0" x="1792" xlink:href="#five-bamboo"/>
  <use id="use3700" y="0" x="1856" xlink:href="#plain-tile"/>
  <use id="use5060" y="0" x="1856" xlink:href="#six-bamboo"/>
  <use id="use3702" y="0" x="1920" xlink:href="#plain-tile"/>
  <use id="use5062" y="0" x="1920" xlink:href="#seven-bamboo"/>
  <use id="use3704" y="0" x="1984" xlink:href="#plain-tile"/>
  <use id="use5064" y="0" x="1984" xlink:href="#eight-bamboo"/>
  <use id="use3706" y="0" x="2048" xlink:href="#plain-tile"/>
  <use id="use5066" y="0" x="2048" xlink:href="#nine-bamboo"/>
  <use id="use3708" y="0" x="2112" xlink:href="#plain-tile"/>
  <use id="use5068" y="0" x="2112" xlink:href="#season-1"/>
  <use id="use3710" y="0" x="2176" xlink:href="#plain-tile"/>
  <use id="use5070" y="0" x="2176" xlink:href="#season-2"/>
  <use id="use3712" y="0" x="2240" xlink:href="#plain-tile"/>
  <use id="use5072" y="0" x="2240" xlink:href="#season-3"/>
  <use id="use3714" y="0" x="2304" xlink:href="#plain-tile"/>
  <use id="use5074" y="0" x="2304" xlink:href="#season-4"/>
  <use id="use3716" y="0" x="2368" xlink:href="#plain-tile"/>
  <use id="use5076" y="0" x="2368" xlink:href="#white-dragon"/>
  <use id="use3718" y="0" x="2432" xlink:href="#plain-tile"/>
  <use id="use5078" y="0" x="2432" xlink:href="#flower-1"/>
  <use id="use3720" y="0" x="2496" xlink:href="#plain-tile"/>
  <use id="use5080" y="0" x="2496" xlink:href="#flower-2"/>
  <use id="use3722" y="0" x="2560" xlink:href="#plain-tile"/>
  <use id="use5082" y="0" x="2560" xlink:href="#flower-3"/>
  <use id="use3724" y="0" x="2624" xlink:href="#plain-tile"/>
  <use id="use5084" y="0" x="2624" xlink:href="#flower-4"/>
  <use id="use3726" y="0" x="2688" xlink:href="#plain-tile"/>
  <!-- selected tiles, same as above but y += 88 -->
  <use id="use3728" y="88" x="0" xlink:href="#selected-tile"/>
  <use id="use6000" y="88" x="0" xlink:href="#one-coin"/>
  <use id="use3730" y="88" x="64" xlink:href="#selected-tile"/>
  <use id="use6002" y="88" x="64" xlink:href="#two-coins"/>
  <use id="use3732" y="88" x="128" xlink:href="#selected-tile"/>
  <use id="use6004" y="88" x="128" xlink:href="#three-coins"/>
  <use id="use3734" y="88" x="192" xlink:href="#selected-tile"/>
  <use id="use6006" y="88" x="192" xlink:href="#four-coins"/>
  <use id="use3736" y="88" x="256" xlink:href="#selected-tile"/>
  <use id="use6008" y="88" x="256" xlink:href="#five-coins"/>
  <use id="use3738" y="88" x="320" xlink:href="#selected-tile"/>
  <use id="use6010" y="88" x="320" xlink:href="#six-coins"/>
  <use id="use3740" y="88" x="384" xlink:href="#selected-tile"/>
  <use id="use6012" y="88" x="384" xlink:href="#seven-coins"/>
  <use id="use3742" y="88" x="448" xlink:href="#selected-tile"/>
  <use id="use6014" y="88" x="448" xlink:href="#eight-coins"/>
  <use id="use3744" y="88" x="512" xlink:href="#selected-tile"/>
  <use id="use6016" y="88" x="512" xlink:href="#nine-coins"/>
  <use id="use3746" y="88" x="576" xlink:href="#selected-tile"/>
  <use id="use6020" y="88" x="576" xlink:href="#north-wind"/>
  <use id="use3748" y="88" x="640" xlink:href="#selected-tile"/>
  <use id="use6022" y="88" x="640" xlink:href="#west-wind"/>
  <use id="use3750" y="88" x="704" xlink:href="#selected-tile"/>
  <use id="use6024" y="88" x="704" xlink:href="#south-wind"/>
  <use id="use3752" y="88" x="768" xlink:href="#selected-tile"/>
  <use id="use6026" y="88" x="768" xlink:href="#east-wind"/>
  <use id="use3754" y="88" x="832" xlink:href="#selected-tile"/>
  <use id="use6028" y="88" x="832" xlink:href="#red-dragon"/>
  <use id="use3756" y="88" x="896" xlink:href="#selected-tile"/>
  <use id="use6030" y="88" x="896" xlink:href="#green-dragon"/>
  <use id="use3758" y="88" x="960" xlink:href="#selected-tile"/>
  <use id="use6032" y="88" x="960" xlink:href="#one-character"/>
  <use id="use3760" y="88" x="1024" xlink:href="#selected-tile"/>
  <use id="use6034" y="88" x="1024" xlink:href="#two-character"/>
  <use id="use3762" y="88" x="1088" xlink:href="#selected-tile"/>
  <use id="use6036" y="88" x="1088" xlink:href="#three-character"/>
  <use id="use3764" y="88" x="1152" xlink:href="#selected-tile"/>
  <use id="use6038" y="88" x="1152" xlink:href="#four-character"/>
  <use id="use3766" y="88" x="1216" xlink:href="#selected-tile"/>
  <use id="use6040" y="88" x="1216" xlink:href="#five-character"/>
  <use id="use3768" y="88" x="1280" xlink:href="#selected-tile"/>
  <use id="use6042" y="88" x="1280" xlink:href="#six-character"/>
  <use id="use3770" y="88" x="1344" xlink:href="#selected-tile"/>
  <use id="use6044" y="88" x="1344" xlink:href="#seven-character"/>
  <use id="use3772" y="88" x="1408" xlink:href="#selected-tile"/>
  <use id="use6046" y="88" x="1408" xlink:href="#eight-character"/>
  <use id="use3774" y="88" x="1472" xlink:href="#selected-tile"/>
  <use id="use6048" y="88" x="1472" xlink:href="#nine-character"/>
  <use id="use3776" y="88" x="1536" xlink:href="#selected-tile"/>
  <use id="use6050" y="88" x="1536" xlink:href="#one-bamboo"/>
  <use id="use3778" y="88" x="1600" xlink:href="#selected-tile"/>
  <use id="use6052" y="88" x="1600" xlink:href="#two-bamboo"/>
  <use id="use3780" y="88" x="1664" xlink:href="#selected-tile"/>
  <use id="use6054" y="88" x="1664" xlink:href="#three-bamboo"/>
  <use id="use3782" y="88" x="1728" xlink:href="#selected-tile"/>
  <use id="use6056" y="88" x="1728" xlink:href="#four-bamboo"/>
  <use id="use3784" y="88" x="1792" xlink:href="#selected-tile"/>
  <use id="use6058" y="88" x="1792" xlink:href="#five-bamboo"/>
  <use id="use3786" y="88" x="1856" xlink:href="#selected-tile"/>
  <use id="use6060" y="88" x="1856" xlink:href="#six-bamboo"/>
  <use id="use3788" y="88" x="1920" xlink:href="#selected-tile"/>
  <use id="use6062" y="88" x="1920" xlink:href="#seven-bamboo"/>
  <use id="use3790" y="88" x="1984" xlink:href="#selected-tile"/>
  <use id="use6064" y="88" x="1984" xlink:href="#eight-bamboo"/>
  <use id="use3792" y="88" x="2048" xlink:href="#selected-tile"/>
  <use id="use6066" y="88" x="2048" xlink:href="#nine-bamboo"/>
  <use id="use3794" y="88" x="2112" xlink:href="#selected-tile"/>
  <use id="use6068" y="88" x="2112" xlink:href="#season-1"/>
  <use id="use3796" y="88" x="2176" xlink:href="#selected-tile"/>
  <use id="use6070" y="88" x="2176" xlink:href="#season-2"/>
  <use id="use3798" y="88" x="2240" xlink:href="#selected-tile"/>
  <use id="use6072" y="88" x="2240" xlink:href="#season-3"/>
  <use id="use3800" y="88" x="2304" xlink:href="#selected-tile"/>
  <use id="use6074" y="88" x="2304" xlink:href="#season-4"/>
  <use id="use3802" y="88" x="2368" xlink:href="#selected-tile"/>
  <use id="use6076" y="88" x="2368" xlink:href="#white-dragon"/>
  <use id="use3804" y="88" x="2432" xlink:href="#selected-tile"/>
  <use id="use6078" y="88" x="2432" xlink:href="#flower-1"/>
  <use id="use3806" y="88" x="2496" xlink:href="#selected-tile"/>
  <use id="use6080" y="88" x="2496" xlink:href="#flower-2"/>
  <use id="use3808" y="88" x="2560" xlink:href="#selected-tile"/>
  <use id="use6082" y="88" x="2560" xlink:href="#flower-3"/>
  <use id="use3810" y="88" x="2624" xlink:href="#selected-tile"/>
  <use id="use6084" y="88" x="2624" xlink:href="#flower-4"/>
  <use id="use3812" y="88" x="2688" xlink:href="#selected-tile"/>
</svg>}

# this by itself should trigger
# a reselection of fonts at 2x the default size
# but all it seems to do is change the sizes of windows
tk scaling 2.49

# some say that tk scaling should be set from the
# result of expr {double([winfo screenwidth .])/([winfo screenmmwidth .]/25.40)}
# however this reports 96 dpi on my pixel, but it also claims I have a 26.6 inch 
# wide screen with 2560 pixels, but the screen is roughly a foot wide.
# xrandr -q reports a more realistic

#this doesn't change anything that I can see
#font create Font -family Helvetica -size 14
#option add *.font Font widgetDefault

if {1} {

    # these on the other hand trigger some
    # larger fonts in Menus and Buttons on some 
    # tk_dialogs
    #
    set fonts(Helvetica-14) {Menu Label Dialog Message Button Menubutton Checkbutton Radiobutton TLabel TButton Dialog.msg}
    set fonts(Courier-14) {Entry Text TEntry}
    set fonts(styled) TButton

    foreach font {Helvetica-14 Courier-14} {
	foreach {fname fsize} [split $font -] break
	foreach class $fonts($font) {
	    # create a named font named $class
	    font create $class -family $fname -size $fsize
	    # make it the default font of $class widgets
	    option add *$class.font $class startupFile
	    # if the widget font is styled
	    if {$class in $fonts(styled)} {
		# make $class the default fonta in the style
		ttk::style config $class -font $class
	    }
	}
    }
    unset fonts font class fname fsize
    # these are the options the tk_dialog pulls its widget width
    # and message font out of
    # option add *Dialog.msg.wrapLength 3i widgetDefault
    # option add *Dialog.msg.font TkCaptionFont widgetDefault
    option add *Canvas.background \#323657 startupFile
}

# create the game window
# with the layout and 
# the tile images for the game
# reload our preferences
# and pass any command line arguments
pack [mahjong::canvas .c \
	  -layout [mahjong::layout ::layout -map $mymap] \
	  -tiles [mahjong::tiles ::tiles -data $mysvg] \
	  -prefs [mahjong::prefs ::prefs] \
	  {*}$argv \
	 ] -fill both -expand true
# start the first game
.c first-game
